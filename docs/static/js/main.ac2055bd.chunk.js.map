{"version":3,"sources":["FormDialog.tsx","TodoItem.tsx","ToolBar.tsx","SideBar.tsx","QR.tsx","AlertDialog.tsx","ActionButton.tsx","BarcodeReader.tsx","App.tsx","serviceWorkerRegistration.ts","index.tsx"],"names":["FormDialog","props","Dialog","fullWidth","open","dialogOpen","onClose","toggleDialog","onSubmit","e","preventDefault","style","margin","TextField","variant","width","fontSize","fontFamily","label","onChange","value","text","autoFocus","DialogActions","Button","color","onClick","aria-label","TodoCard","styled","Card","theme","marginTop","spacing","marginLeft","marginRight","padding","Form","ButtonContainer","display","flexDirection","justifyContent","alignItems","background","border","cursor","outline","Trash","TodoItem","todo","onEdit","id","target","disabled","checked","removed","onCheck","filter","pink","A200","grey","lightBlue","Typography","userSelect","onRemove","ToolBar","Box","sx","flexGrow","AppBar","position","Toolbar","IconButton","size","edge","mr","toggleDrawer","arg","translator","DrawerList","DrawerHeader","height","backgroundColor","indigo","DrawerAvatar","Avatar","IconUnChecked","RadioButtonUncheckedIcon","IconCompleted","CheckCircleIcon","SideBar","Drawer","drawerOpen","role","pjson","version","List","ListItem","button","onSort","ListItemIcon","ListItemText","secondary","Divider","onOpen","TodoBackdrop","Backdrop","zIndex","drawer","QR","Alert","AlertDialog","alertOpen","toggleAlert","DialogTitle","DialogContent","DialogContentText","onEmpty","FabButton","Fab","right","bottom","ActionButton","todos","length","QrCodeReader","codeReader","useRef","BrowserMultiFormatOneDReader","controlsRef","videoRef","useState","barcode","setBarcode","useEffect","current","decodeFromVideoDevice","undefined","result","error","controls","console","log","getText","stop","maxWidth","maxHeight","ref","App","setText","setTodos","setFilter","setDrawerOpen","qrOpen","setQrOpen","setDialogOpen","setAlertOpen","handleOnEdit","newTodos","map","handleOnCheck","handleOnRemove","filteredTodos","GlobalStyles","styles","body","newTodo","Date","getTime","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.ac2055bd.chunk.js","sourcesContent":["import Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\n\ntype Props = {\n  text: string;\n  dialogOpen: boolean;\n  toggleDialog: () => void;\n  onSubmit: () => void;\n  onChange: (\n    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n  ) => void;\n};\n\nexport const FormDialog = (props: Props) => {\n  return (\n    <Dialog fullWidth open={props.dialogOpen} onClose={props.toggleDialog}>\n      <form\n        onSubmit={(e) => {\n          e.preventDefault();\n          props.onSubmit();\n        }}\n      >\n        <div style={{ margin: '1em' }}>\n          <TextField\n            variant=\"standard\"\n            style={{\n              width: '100%',\n              fontSize: '16px',\n              fontFamily:\n                '-apple-system, BlinkMacSystemFont, Roboto, sans-serif',\n            }}\n            label=\"タスクを入力...\"\n            onChange={(e) => props.onChange(e)}\n            value={props.text}\n            autoFocus\n          />\n          <DialogActions>\n            <Button\n              variant=\"outlined\"\n              color=\"primary\"\n              onClick={props.onSubmit}\n              aria-label=\"add\"\n            >\n              追加\n            </Button>\n          </DialogActions>\n        </div>\n      </form>\n    </Dialog>\n  );\n};","import Card from '@mui/material/Card';\nimport TextField from '@mui/material/TextField';\nimport Typography from '@mui/material/Typography';\n\nimport { styled } from '@mui/material/styles';\nimport { lightBlue, pink, grey } from '@mui/material/colors';\n\nimport RadioButtonUncheckedIcon from '@mui/icons-material/RadioButtonUnchecked';\nimport CheckIcon from '@mui/icons-material/CheckCircleOutline';\nimport UndoIcon from '@mui/icons-material/Undo';\nimport DeleteIcon from '@mui/icons-material/Delete';\n\ntype Props = {\n  todo: Todo;\n  onEdit: (id: number, title: string) => void;\n  onCheck: (id: number, checked: boolean) => void;\n  onRemove: (id: number, removed: boolean) => void;\n  filter: Filter;\n};\n\nconst TodoCard = styled(Card)(({ theme }) => ({\n  marginTop: theme.spacing(1),\n  marginLeft: theme.spacing(2),\n  marginRight: theme.spacing(2),\n  padding: theme.spacing(1),\n  fontFamily: '-apple-system, BlinkMacSystemFont, Roboto, sans-serif',\n}));\n\nconst Form = styled('div')(({ theme }) => ({\n  marginTop: theme.spacing(1),\n  marginLeft: theme.spacing(1),\n  marginRight: theme.spacing(1),\n  fontSize: '16px',\n}));\n\nconst ButtonContainer = styled('div')(({ theme }) => ({\n  marginTop: theme.spacing(1),\n  display: 'flex',\n  flexDirection: 'row',\n  justifyContent: 'space-between',\n}));\n\nconst Button = styled('button')(() => ({\n  display: 'flex',\n  flexDirection: 'row',\n  justifyContent: 'center',\n  alignItems: 'center',\n  background: 'none',\n  border: 'none',\n  cursor: 'pointer',\n  outline: 'none',\n}));\n\nconst Trash = styled('button')(() => ({\n  background: 'none',\n  border: 'none',\n  cursor: 'pointer',\n  outline: 'none',\n}));\n\nexport const TodoItem = (props: Props) => {\n  return (\n    <TodoCard>\n      <Form>\n        <TextField\n          fullWidth\n          variant=\"standard\"\n          value={props.todo.value}\n          onChange={(e) => props.onEdit(props.todo.id, e.target.value)}\n          disabled={props.todo.checked || props.todo.removed}\n        />\n      </Form>\n      <ButtonContainer>\n        <Button\n          onClick={() => props.onCheck(props.todo.id, props.todo.checked)}\n          disabled={props.filter === 'removed'}\n          aria-label=\"check\"\n        >\n          {props.todo.checked ? (\n            <CheckIcon\n              style={{\n                color: props.filter !== 'removed' ? pink.A200 : grey[500],\n              }}\n            />\n          ) : (\n            <RadioButtonUncheckedIcon\n              style={{\n                color: props.filter !== 'removed' ? lightBlue[500] : grey[500],\n              }}\n            />\n          )}\n          <Typography\n            style={{\n              userSelect: 'none',\n              color:\n                props.todo.checked && props.filter !== 'removed'\n                  ? pink.A200\n                  : grey[500],\n            }}\n          >\n            Done\n          </Typography>\n        </Button>\n        <Trash\n          onClick={() => props.onRemove(props.todo.id, props.todo.removed)}\n          aria-label=\"trash\"\n        >\n          {props.todo.removed ? (\n            <UndoIcon style={{ color: lightBlue[500] }} />\n          ) : (\n            <DeleteIcon style={{ color: grey[500] }} />\n          )}\n        </Trash>\n      </ButtonContainer>\n    </TodoCard>\n  );\n};","import AppBar from '@mui/material/AppBar';\nimport Box from '@mui/material/Box';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\nimport IconButton from '@mui/material/IconButton';\n\nimport MenuIcon from '@mui/icons-material/Menu';\n\ntype Props = {\n    filter: Filter;\n    toggleDrawer: () => void;\n};\n\nexport const ToolBar = (props: Props) => {\n\n    const translator = (arg: Filter) => {\n        switch (arg) {\n            case 'all':\n                return 'すべてのタスク';\n            case 'unchecked':\n                return '現在のタスク';\n            case 'checked':\n                return '完了したタスク';\n            case 'removed':\n                return 'ごみ箱';\n            default:\n                return 'TODO';\n        }\n    };\n\n    return (\n        <Box sx={{ flexGrow: 1 }}>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton\n                        size=\"large\"\n                        edge=\"start\"\n                        color=\"inherit\"\n                        aria-label=\"menu\"\n                        sx={{ mr: 2 }}\n                        onClick={props.toggleDrawer}\n                    >\n                        <MenuIcon />\n                    </IconButton>\n                    <Typography>{translator(props.filter)}</Typography>\n                </Toolbar>\n            </AppBar>\n        </Box>\n    );\n}","import List from '@mui/material/List';\nimport Avatar from '@mui/material/Avatar';\nimport Drawer from '@mui/material/Drawer';\nimport Divider from '@mui/material/Divider';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText';\n\nimport ShareIcon from '@mui/icons-material/Share';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport SubjectIcon from '@mui/icons-material/Subject';\nimport CreateIcon from '@mui/icons-material/CreateRounded';\nimport CheckCircleIcon from '@mui/icons-material/CheckCircleOutline';\nimport RadioButtonUncheckedIcon from '@mui/icons-material/RadioButtonUnchecked';\n\nimport { styled } from '@mui/material/styles';\nimport { indigo, lightBlue, pink } from '@mui/material/colors';\n\nimport pjson from '../package.json';\n\ntype Props = {\n    drawerOpen: boolean;\n    toggleDrawer: () => void;\n    onSort: (filter: Filter) => void;\n    onOpen: () => void;\n};\n\nconst DrawerList = styled('div')(() => ({\n    width: 250,\n}));\n\nconst DrawerHeader = styled('div')(() => ({\n    height: 150,\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: '1em',\n    backgroundColor: indigo[500],\n    color: '#ffffff',\n    fontFamily: '-apple-system, BlinkMacSystemFont, Roboto, sans-serif',\n}));\n\nconst DrawerAvatar = styled(Avatar)(({ theme }) => ({\n    backgroundColor: pink[500],\n    width: theme.spacing(6),\n    height: theme.spacing(6),\n}));\n\nconst IconUnChecked = styled(RadioButtonUncheckedIcon)(() => ({\n    color: lightBlue[500],\n}));\n\nconst IconCompleted = styled(CheckCircleIcon)(() => ({\n    color: pink.A200,\n}));\n\nexport const SideBar = (props: Props) => {\n    return (\n        <Drawer\n            variant=\"temporary\"\n            open={props.drawerOpen}\n            onClose={props.toggleDrawer}\n        >\n            <DrawerList role=\"presentation\" onClick={props.toggleDrawer}>\n                <DrawerHeader>\n                    <DrawerAvatar>\n                        <CreateIcon />\n                    </DrawerAvatar>\n                    <p>TODO v{pjson.version}</p>\n                </DrawerHeader>\n                <List>\n                    <ListItem button onClick={() => props.onSort('all')} aria-label=\"all\">\n                        <ListItemIcon>\n                            <SubjectIcon />\n                        </ListItemIcon>\n                    <ListItemText secondary=\"すべてのタスク\" />\n                    </ListItem>\n                    <ListItem\n                        button\n                        onClick={() => props.onSort('unchecked')}\n                        aria-label=\"incomplete\"\n                    >\n                        <ListItemIcon>\n                            <IconUnChecked />\n                        </ListItemIcon>\n                        <ListItemText secondary=\"現在のタスク\" />\n                    </ListItem>\n                    <ListItem\n                        button\n                        onClick={() => props.onSort('checked')}\n                        aria-label=\"complete\"\n                    >\n                        <ListItemIcon>\n                            <IconCompleted />\n                        </ListItemIcon>\n                        <ListItemText secondary=\"完了したタスク\" />\n                    </ListItem>\n                    <ListItem\n                        button\n                        onClick={() => props.onSort('removed')}\n                        aria-label=\"removed\"\n                    >\n                        <ListItemIcon>\n                            <DeleteIcon />\n                        </ListItemIcon>\n                        <ListItemText secondary=\"ごみ箱\" />\n                    </ListItem>\n                    <Divider />\n                    <ListItem button onClick={props.onOpen} aria-label=\"share\">\n                        <ListItemIcon>\n                            <ShareIcon />\n                        </ListItemIcon>\n                        <ListItemText secondary=\"このアプリを共有\" />\n                    </ListItem>\n                </List>\n            </DrawerList>\n        </Drawer>\n    );\n};","import { QRCode } from 'react-qrcode-logo';\n\nimport Backdrop from '@mui/material/Backdrop';\nimport { styled } from '@mui/material/styles';\n\nconst TodoBackdrop = styled(Backdrop)(({ theme }) => ({\n    zIndex: theme.zIndex.drawer + 1,\n    color: '#fff',\n    backgroundColor: 'rgba(0, 0, 0, 0.8)',\n}));\n\ntype Props = {\n    open: boolean;\n    onClose: () => void;\n};\n\nexport const QR = (props: Props) => {\n    return (\n        <TodoBackdrop open={props.open} onClick={props.onClose}>\n            <QRCode value=\"https://act-sakamoto.github.io/pwa-sample\" />\n        </TodoBackdrop>\n    );\n};","import Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\n\nimport { styled } from '@mui/material/styles';\n\ntype Props = {\n  alertOpen: boolean;\n  toggleAlert: () => void;\n  onEmpty: () => void;\n};\n\nconst Alert = styled(Dialog)(() => ({\n  fontFamily: '-apple-system, BlinkMacSystemFont, Roboto, sans-serif',\n}));\n\nexport const AlertDialog = (props: Props) => {\n  return (\n    <Alert open={props.alertOpen} onClose={props.toggleAlert}>\n      <DialogTitle>アラート</DialogTitle>\n      <DialogContent>\n        <DialogContentText>\n          本当にごみ箱を完全に空にしますか？\n        </DialogContentText>\n        <DialogContentText>この操作は取り消しできません。</DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={props.toggleAlert} color=\"primary\" aria-label=\"cancel\">\n          キャンセル\n        </Button>\n        <Button\n          onClick={() => {\n            props.toggleAlert();\n            props.onEmpty();\n          }}\n          color=\"secondary\"\n          aria-label=\"ok\"\n          autoFocus\n        >\n          OK\n        </Button>\n      </DialogActions>\n    </Alert>\n  );\n};","import Fab from '@mui/material/Fab';\nimport CreateIcon from '@mui/icons-material/CreateRounded';\nimport DeleteIcon from '@mui/icons-material/DeleteRounded';\n\nimport { styled } from '@mui/material/styles';\n\ntype Props = {\n  todos: Todo[];\n  filter: Filter;\n  alertOpen: boolean;\n  dialogOpen: boolean;\n  toggleAlert: () => void;\n  toggleDialog: () => void;\n};\n\nconst FabButton = styled(Fab)({\n  position: 'fixed',\n  right: 15,\n  bottom: 15,\n});\n\nexport const ActionButton = (props: Props) => {\n  const removed = props.todos.filter((todo) => todo.removed).length !== 0;\n\n  return (\n    <>\n      {props.filter === 'removed' ? (\n        <FabButton\n          aria-label=\"delete-button\"\n          color=\"secondary\"\n          onClick={props.toggleAlert}\n          disabled={!removed || props.alertOpen}\n        >\n          <DeleteIcon />\n        </FabButton>\n      ) : (\n        <FabButton\n          aria-label=\"add-button\"\n          color=\"secondary\"\n          onClick={props.toggleDialog}\n          disabled={props.filter === 'checked' || props.dialogOpen}\n        >\n          <CreateIcon />\n        </FabButton>\n      )}\n    </>\n  );\n};","import { BrowserMultiFormatOneDReader, IScannerControls } from \"@zxing/browser\"\n// import { Result } from '@zxing/library'\nimport { useRef, useEffect, useState } from 'react';\n\nexport const QrCodeReader  = () => {\n    const codeReader = useRef(new BrowserMultiFormatOneDReader())\n    const controlsRef = useRef<IScannerControls|null>()\n    const videoRef = useRef<HTMLVideoElement>(null)\n    const [barcode, setBarcode] = useState<string>('読み取り中...'); \n\n  useEffect(() => {\n    if (!videoRef.current) {\n      return \n    }\n    codeReader.current.decodeFromVideoDevice(\n      undefined, \n      videoRef.current, \n      (result, error, controls) => {\n        if (error) {\n          return\n        }\n        if (result) {\n//          props.onReadQRCode(result)\n            console.log(result)\n            setBarcode(result.getText())\n        }\n        controlsRef.current = controls\n      })\n    return () => {\n      if (!controlsRef.current) {\n        return\n      }\n      \n      controlsRef.current.stop()\n      controlsRef.current = null\n    }\n  }, [])\n\n  return (\n  <div>\n    <video\n      style={{ maxWidth: \"100%\", maxHeight: \"100%\",height:\"100%\" }}\n      ref={videoRef}\n    />\n    <p>{barcode}</p>\n  </div>\n  );\n\n}","import { useState } from 'react';\nimport { FormDialog } from './FormDialog';\nimport { TodoItem } from './TodoItem';\nimport { ToolBar } from './ToolBar';\nimport { SideBar } from './SideBar';\nimport { QR } from './QR';\nimport { AlertDialog } from './AlertDialog';\nimport { ActionButton } from './ActionButton';\nimport GlobalStyles from '@mui/material/GlobalStyles';\nimport { QrCodeReader } from './BarcodeReader';\n\ntype Filter = 'all' | 'checked' | 'unchecked' | 'removed';\n\ntype Todo = {\n  value: string;\n  id: number;\n  checked: boolean;\n  removed: boolean;\n}\n\nexport const App = () => {\n\n  const [text, setText] = useState('');\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [filter, setFilter] = useState<Filter>('all');\n  const [drawerOpen, setDrawerOpen] = useState(false);\n  const [qrOpen, setQrOpen] = useState(false);\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [alertOpen, setAlertOpen] = useState(false);\n\n  const [qrCodes, setQrCodes] = useState([])\n\n  const toggleDrawer = () => setDrawerOpen(!drawerOpen);\n\n  const handleOnSort = (filter: Filter) => {\n    setFilter(filter);\n  };\n\n  const onQROpen = () => setQrOpen(true);\n  const onQRClose = () => setQrOpen(false);\n\n  const toggleDialog = () => {\n    setDialogOpen(!dialogOpen);\n    // フォームへの入力をクリア\n    setText('');\n  };\n\n  const toggleAlert = () => setAlertOpen(!alertOpen);\n\n  const handleOnSubmit = () => {\n    if(!text) return;\n  \n    const newTodo: Todo = {\n      value: text,\n      id: new Date().getTime(),\n      checked: false,\n      removed: false,\n    }\n\n    setTodos([newTodo, ...todos]);\n    setText('');\n\n    // FormDialog コンポーネントを閉じる\n    setDialogOpen(false);\n  }\n\n  const handleOnChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    setText(e.target.value);\n  };\n  \n  const handleOnEdit = (id: number, value:string) => {\n    const newTodos = todos.map((todo) => {\n      if (todo.id === id) {\n        todo.value = value;\n      }\n\n      return todo;\n    });\n\n    setTodos(newTodos);\n  }\n\n  const handleOnCheck = (id: number, checked: boolean) => {\n    const newTodos = todos.map((todo) => {\n      if (todo.id === id) {\n        todo.checked = !checked;\n      }\n\n      return todo;\n    });\n\n    setTodos(newTodos);\n  }\n\n  const handleOnRemove = (id: number, removed: boolean) => {\n    const newTodos = todos.map((todo) => {\n      if (todo.id === id) {\n        todo.removed = !removed;\n      }\n\n      return todo;\n    });\n\n    setTodos(newTodos);\n  }\n\n  const handleOnEmpty = () => {\n    const newTodos = todos.filter((todo) => !todo.removed);\n    setTodos(newTodos);\n  }\n\n  const filteredTodos = todos.filter((todo) => {\n    switch (filter) {\n      case 'all':\n        return !todo.removed;\n      case 'checked':\n        return todo.checked && !todo.removed;\n      case 'unchecked':\n        return !todo.checked && !todo.removed;\n      case 'removed':\n        return todo.removed;\n      default:\n        return todo;\n    }\n\n  });\n\n  return (\n    <div>\n      <GlobalStyles styles={{ body: { margin: 0, padding: 0 } }} />\n      <ToolBar filter={filter} toggleDrawer={toggleDrawer}/>\n      <SideBar\n        drawerOpen={drawerOpen}\n        toggleDrawer={toggleDrawer}\n        onSort={handleOnSort}\n        onOpen={onQROpen}\n      />\n      <FormDialog\n        text={text}\n        dialogOpen={dialogOpen}\n        toggleDialog={toggleDialog}\n        onChange={handleOnChange}\n        onSubmit={handleOnSubmit}\n      />\n      <AlertDialog\n        alertOpen={alertOpen}\n        onEmpty={handleOnEmpty}\n        toggleAlert={toggleAlert}\n      />\n      <QR open={qrOpen} onClose={onQRClose} />\n      <QrCodeReader />\n      {filteredTodos.map((todo) => {\n          return (\n            <TodoItem\n              key={todo.id}\n              todo={todo}\n              filter={filter}\n              onCheck={handleOnCheck}\n              onEdit={handleOnEdit}\n              onRemove={handleOnRemove}\n            />\n          );\n        })}\n        <ActionButton\n          todos={todos}\n          filter={filter}\n          alertOpen={alertOpen}\n          dialogOpen={dialogOpen}\n          toggleAlert={toggleAlert}\n          toggleDialog={toggleDialog}\n        />\n    </div>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport '@fontsource/roboto/300.css';\nimport '@fontsource/roboto/400.css';\nimport '@fontsource/roboto/500.css';\nimport '@fontsource/roboto/700.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}