{"version":3,"sources":["mocks/handlers.ts","mocks/index.ts","mocks/server.ts","mocks/browser.ts","serviceWorkerRegistration.ts","lib/ky.ts","contexts/auth/AuthUserContext.tsx","components/pages/Login/LoginPresenter.tsx","components/pages/Login/Login.tsx","components/oraganisms/Header/Header.tsx","components/oraganisms/LauncherMenuList/LauncherMenuList.tsx","components/oraganisms/SideBar/SideBar.tsx","components/pages/MainMenu/MainMenuPresenter.tsx","components/pages/MainMenu/MainMenu.tsx","components/molecules/ErrorDialog/AlertDialog.tsx","components/oraganisms/BarcodeReader/BarcodeReader.tsx","components/pages/InjectionCheck/InjectionCheckPresenter.tsx","components/pages/InjectionCheck/InjectionCheck.tsx","components/oraganisms/NestList/NestListNode.tsx","components/oraganisms/NestList/NestListBranch.tsx","components/oraganisms/NestList/NestListTree.tsx","components/oraganisms/InjectionRouteNestList/InjectionRouteNestList.tsx","components/pages/InjectionExecute/injectionExecution.ts","components/oraganisms/StaffSelect/StaffSelectPresenter.tsx","components/oraganisms/StaffSelect/StaffSelect.tsx","components/pages/InjectionExecute/Drop/DropExecuteItemInput.tsx","components/pages/InjectionExecute/Drop/DropExecuteItem.tsx","components/pages/InjectionExecute/Drop/DropExecuteItemList.tsx","utils/age.ts","components/oraganisms/PatientCard/PatientCardPresenter.tsx","components/oraganisms/PatientCard/PatientCard.tsx","components/oraganisms/InjectionPatientCard/InjectionPatientCard.tsx","components/pages/InjectionExecute/Oneshot/OneShotExec.tsx","components/pages/InjectionExecute/Drop/DropExecute.tsx","components/pages/InjectionExecute/InjectionExecute.tsx","components/oraganisms/TransfusionPatientCard/TransfusionPatientCardPresenter.tsx","components/oraganisms/TransfusionPatientCard/TransfusionPatientCard.tsx","components/pages/TransfusionExecute/orderStatusUtil.ts","components/oraganisms/TransfusionExecuteTypeSelect/TransfusionExecuteTypeSelectPresenter.tsx","components/oraganisms/TransfusionExecuteTypeSelect/TransfusionExecuteTypeSelect.tsx","components/molecules/MultipleSelect/MultipleSelectPresenter.tsx","components/molecules/MultipleSelect/MultipleSelect.tsx","components/oraganisms/SideEffectSelect/SideEffectSelectPresenter.tsx","components/oraganisms/SideEffectSelect/SideEffectSelect.tsx","components/pages/TransfusionExecute/TransfusionExecutePresenter.tsx","components/pages/TransfusionExecute/TransfusionExecute.tsx","components/pages/TransfusionCheck/TransfusionCheckPresenter.tsx","components/pages/TransfusionCheck/TransfusionCheck.tsx","contexts/AppProvider.tsx","App.tsx","index.tsx"],"names":["handlers","rest","post","_","res","ctx","json","loggedIn","staffId","staffName","window","require","server","listen","worker","start","setupServer","setupWorker","Boolean","location","hostname","exec","kyCustom","ky","create","prefixUrl","process","AuthUserContext","createContext","AuthOperationContext","login","Error","logout","useAuthUser","useContext","useLogout","AuthUserProvider","children","useState","authUser","setAuthUser","inputUser","a","password","timeout","Provider","value","schema","yup","required","LoginPresenter","onLogin","useForm","resolver","yupResolver","register","handleSubmit","errors","formState","Container","maxWidth","Stack","spacing","TextField","id","label","type","defaultValue","error","helperText","message","autoComplete","Button","variant","onClick","Login","Header","onDrawerToggle","auth","Box","sx","flexGrow","AppBar","position","Toolbar","Grid","container","alignItems","display","sm","xs","item","IconButton","size","edge","color","mr","Typography","menus","MenuCardContent","displayName","description","navigation","navigate","useNavigate","CardContent","component","mb","CardActions","LauncherMenuList","map","Card","DrawerList","styled","width","DrawerHeader","height","flexDirection","justifyContent","padding","backgroundColor","indigo","DrawerAvatar","Avatar","theme","pink","SideBar","drawerOpen","toggleDrawer","onOpen","Drawer","open","onClose","role","pjson","version","List","Divider","ListItem","button","ListItemIcon","ListItemText","secondary","MainMenuPresenter","onLogout","MainMenu","setDrawerOpen","Alert","Dialog","fontFamily","AlertDialog","alertOpen","toggleAlert","onEmpty","DialogTitle","DialogContent","DialogContentText","split","filter","DialogActions","autoFocus","BarcodeReader","onScan","scanResult","setScanResult","sameScanCount","setSameScanCount","setOpen","handleDetected","data","code","codeResult","c","before","useEffect","Quagga","init","inputStream","constraints","min","facingMode","aspectRatio","max","locator","patchSize","halfSample","numOfWorkers","frequency","decoder","readers","locate","stop","onDetected","className","InjectionCheckPresenter","patientId","orderId","dialogOpen","setDialogOpen","transit","paddingTop","focused","InputProps","startAdornment","InputAdornment","AccountCircle","fullWidth","InjectionCheck","setPatientId","setOrderId","inputCode","setInputCode","zeroSuppressCode","Number","String","NestListNode","props","isExistChildren","level","onToggle","onItemSelect","ListItemButton","pl","primary","NestListBranch","nestListItemClickAction","undefined","length","newLevel","child","Collapse","in","unmountOnExit","disablePadding","itemId","renderBranches","NestListTree","treeItems","InjectionRouteNestList","listDatas","bgcolor","subheader","ListSubheader","treeItem","doExecution","execute","alert","StaffSelectPresenter","staffNames","handleClickIcon","handleOnChange","disabled","FormControl","direction","options","onChange","newValue","renderInput","params","FormHelperText","getStaffName","staff","firstName","lastName","StaffSelect","defaultStaffId","staffs","setStaffs","setStaffNames","loadStaffs","get","staffsResult","staffNameList","s","console","log","targetStaff","find","getStaffNameById","input","DropExecuteItemInput","defaultExecute","onInput","executes","isShowRemainAmount","totalAmount","reserveDate","injectionExecutionId","dropRecordId","setDropRecordId","openInjectionRouteDialog","setOpenInjectionRouteDialog","injectionRouteNestListOpen","injectionRouteMstId","injectionRouteId","setInjectionRouteId","nestListDatas","setNestListDatas","injectionRouteName","setInjectionRouteName","executionDropSpeed","dropSpeed","setDropSpeed","executionStartDate","startDate","setStartDate","startStaff","setStartStaff","executionEndDate","endDate","setEndDate","endStaff","setEndStaff","executionCommentId","executeCommentId","setExecuteCommentId","executionFreeComment","executeCommentValue","setExecuteCommentValue","executionAmount","amount","setAmount","remainAmount","setRemainAmount","endCommentId","setEndCommentId","endFreeComment","endCommentValue","setEndCommentValue","endCommentDatas","setEndCommentDatas","executeCommentDatas","setExecuteCommentDatas","injectionRouteError","setInjectionRouteError","injectionRouteErrorHelperText","setInjectionRouteErrorHelperText","dropSpeedError","setDropSpeedError","dropSpeedErrorHelperText","setDropSpeedErrorHelperText","startDateError","setStartDateError","startDateErrorHelperText","setStartDateErrorHelperText","startStaffError","setStartStaffError","startStaffErrorHelperText","setStartStaffErrorHelperText","endStaffError","setEndStaffError","endStaffErrorHelperText","setEndStaffErrorHelperText","amountError","setAmountError","amountErrorHelperText","setAmountErrorHelperText","endDateError","setEndDateError","endDateErrorHelperText","setEndDateErrorHelperText","isImiidateEnd","some","e","inputCheck","isEndAdd","isNotFinishError","lastRow","lastRowIndex","findIndex","isStartDateError","isInjectionRouteInputError","isBefore","Date","isAfter","isStartStaffInputError","isEndDateError","isEndStaffInputError","isAmountInputError","load","searchParams","result","executeCommentItems","endCommentItems","routeNestDatas","amountSum","forEach","remain","noValidate","paddingLeft","readOnly","injectionRouteData","event","target","endAdornment","InputLabelProps","shrink","executionStartId","isDropSpeedInputError","isStartDateInputError","isEndDateInputError","isEndDateFutureDateError","second","getTime","toFixed","freeSolo","content","getOptionLabel","option","itemD","executionEndId","DropExecuteItem","itemData","onClickDeleteButton","itemDataArray","isLastRow","injectionOrder","updateInputDialog","setUpdateInputDialog","inputData","setInputData","openUpdateInputDialog","minWidth","fontSize","format","style","DropExecuteItemList","dropItemList","deleteAction","listItem","getAge","birthday","today","thisYearsBirthday","getFullYear","getMonth","getDate","age","PatientCardPresenter","patient","cardActions","cardContent","displayContent","birthDate","formatBirthDate","toString","CardHeader","avatar","title","gutterBottom","sex","bloodType","rhFactor","CircularProgress","margin","PatientCard","setPatient","loadPatient","patientResult","InjectionPatientCard","inputDisplayType","deleteExecuteItem","expanded","setExpanded","displayType","setDisplayType","handleExpandClick","selectedDisplayType","execType","createStatusSummary","issueStaffName","issueDate","departmentName","instructedName","instructedDate","completeName","completeDate","orderStatusName","plansDate","substring","summary","FabButton","Fab","right","bottom","OneShotExec","editable","orderStatus","successBarOpen","setSuccessBarOpen","errorBarOpen","setErrorBarOpen","execList","oneShotRecord","injectionRouteNameTextFieldValue","setInjectionRouteNameTextFieldValue","executeButtonAction","executeData","orderHeaderId","updateId","end","Backdrop","zIndex","drawer","Snackbar","autoHideDuration","severity","Autocomplete","DropExecute","isEndFlg","setEndFlg","setExecutes","f","endFlg","InjectionExecute","useParams","patientid","orderid","injectionOrderData","setInjectionOrderData","doInstructResult","setDoInstructResult","checkPass","setCheckPass","errorText","setErrorText","useCallback","mainClass","executableFutureDay","preferredDate","instructedStatus","forcingInstracted","doInstruct","put","userId","TransfusionPatientCardPresenter","status","index","isExecuteTarget","opacity","formulationName","formulationNo","executeDate","executeStaffName","executeTypeName","filterTypeName","sideEffectNames","TransfusionPatientCard","crateStatusSummary","order","issueName","deputeIssueName","auditName","auditDate","statusName","getStatusName","replaceAll","TransfusionExecuteTypeSelectPresenter","execTypeItems","defaultExecuteType","InputLabel","Select","labelId","MenuItem","name","TransfusionExecuteTypeSelect","displayExecuteTypes","executeTypes","setExecuteTypes","executeResult","filteredExecuteTypes","d","selected","MenuProps","PaperProps","maxHeight","ITEM_HEIGHT","MultipleSelectPresenter","items","values","selectedNames","selectedValues","selectedValue","selectedNameValue","getSelectedNames","m","multiple","slice","sort","selectedNameValues","v","OutlinedInput","renderValue","join","Checkbox","checked","MultipleSelect","SideEffectSelectPresenter","sideEffectIds","SideEffectSelect","sideEffects","setSideEffects","sideEffectItems","setSideEffectItems","sideEffectName","sideEffectMstId","selectedSideEffects","i","executeStaffId","executeType","filterType","TranfusionExecutePresenter","transfusionOrder","deliveryFormulation","handleExecute","formulationCode","deliveryFormulations","formulation","targetFormulationNo","targetFormulationCode","toTransfusionExecute","targetExecute","defaultValues","control","render","field","inputForm","TranfusionExecute","setOrder","setDeliveryFormulation","isLoading","setLoading","transfusionResult","formurations","targetFormulation","transfusionOrderPatch","updateStaffId","patch","red","TransfusionCheckPresenter","formurationCode","formurationNumber","TransfusionCheck","setFormurationCode","setFormurationNumber","ErrorFallback","assign","origin","AppProvider","FallbackComponent","PrivateOutlet","to","UnAuthOutlet","App","basename","path","element","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.81b60844.chunk.js","sourcesContent":["import { rest } from 'msw';\nimport AuthUser from '@/types/auth';\n\n// const URL = process.env.REACT_APP_API_URL ? process.env.REACT_APP_API_URL : '';\n\n// eslint-disable-next-line import/prefer-default-export\nexport const handlers = [\n  rest.post(`http://localhost:8080/jerseywebapp/rest/login`, (_, res, ctx) =>\n    res(\n      ctx.json({\n        loggedIn: true,\n        staffId: '10008',\n        staffName: '斎藤一',\n      } as AuthUser),\n    ),\n  ),\n];\n","/* eslint-disable @typescript-eslint/no-unsafe-call */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-var-requires */\n/* eslint-disable global-require */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\nif (typeof window === 'undefined') {\n  const { server } = require('./server');\n  server.listen();\n} else {\n  const { worker } = require('./browser');\n  worker.start();\n}\nexport {};\n","import { setupServer } from 'msw/node';\nimport { handlers } from './handlers';\n\n// eslint-disable-next-line import/prefer-default-export\nexport const server = setupServer(...handlers);\n","import { setupWorker } from 'msw';\nimport { handlers } from './handlers';\n\n// eslint-disable-next-line import/prefer-default-export\nexport const worker = setupWorker(...handlers);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/.exec(\n      window.location.hostname,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'development' && 'serviceWorker' in navigator) {\n    // if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // if ('serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import ky from 'ky';\n\nconst kyCustom = ky.create({\n  prefixUrl: process.env.REACT_APP_API_URL ? process.env.REACT_APP_API_URL : '',\n});\n\nexport default kyCustom;\n","import { createContext, FC, useContext, useState } from 'react';\nimport ky from '@/lib/ky';\nimport AuthUser from '../../types/auth';\n\ntype InputUser = {\n  staffId: string;\n  password: string;\n};\n\ntype OperationType = {\n  login: (userId: InputUser) => void;\n  logout: () => void;\n};\n\nconst AuthUserContext = createContext<AuthUser | null>(null);\nconst AuthOperationContext = createContext<OperationType>({\n  login: (_) => new Error('Providerが設定されていません'),\n  logout: () => new Error('Providerが設定されていません'),\n});\n\nconst AuthUserProvider: FC = ({ children }) => {\n  const [authUser, setAuthUser] = useState<AuthUser | null>(null);\n\n  const login = async (inputUser: InputUser) => {\n    const { staffId, password } = inputUser;\n    try {\n      const res = await ky\n        .post('login', {\n          json: {\n            staffId,\n            password,\n          },\n          timeout: false,\n        })\n        .json<AuthUser>();\n\n      if (res.loggedIn) {\n        setAuthUser(res);\n      } else {\n        // alert('ログインに失敗しました。');\n      }\n    } catch (err) {\n      setAuthUser({\n        loggedIn: true,\n        staffId: '99999999',\n        staffName: 'テスト職員',\n      });\n    }\n  };\n\n  const logout = () => {\n    // await login() //ログアウト処理\n    setAuthUser(null);\n  };\n\n  return (\n    <AuthOperationContext.Provider value={{ login, logout }}>\n      <AuthUserContext.Provider value={authUser}>\n        {children}\n      </AuthUserContext.Provider>\n    </AuthOperationContext.Provider>\n  );\n};\n\nexport const useAuthUser = (): AuthUser | null => useContext(AuthUserContext);\nexport const useLogin: () => (inputUser: InputUser) => void = () =>\n  useContext(AuthOperationContext).login;\nexport const useLogout: () => () => void = () =>\n  useContext(AuthOperationContext).logout;\n\nexport default AuthUserProvider;\n","import { VFC } from 'react';\nimport { Button, Container, Stack, TextField } from '@mui/material';\nimport { SubmitHandler, useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\n\ntype Props = {\n  onLogin: (staffId: string, password: string) => void;\n};\n\ntype LoginInput = {\n  staffId: string;\n  password: string;\n  sample: string;\n};\n\nconst schema = yup.object({\n  staffId: yup.string().required('職員IDを入力してください。'),\n  password: yup.string().required('パスワードを入力してください。'),\n});\n\nconst LoginPresenter: VFC<Props> = ({ onLogin }) => {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm<LoginInput>({\n    resolver: yupResolver(schema),\n  });\n\n  const onSubmit: SubmitHandler<LoginInput> = ({ staffId, password }) => {\n    onLogin(staffId, password);\n  };\n\n  return (\n    <Container maxWidth=\"sm\">\n      <Stack spacing={2}>\n        <TextField\n          id=\"staff-id\"\n          label=\"職員ID\"\n          type=\"number\"\n          required\n          defaultValue=\"10008\"\n          error={'staffId' in errors}\n          helperText={errors.staffId?.message}\n          {...register('staffId')}\n        />\n        <TextField\n          id=\"staff-password\"\n          label=\"パスワード\"\n          type=\"password\"\n          required\n          defaultValue=\"Llanowar12$\"\n          autoComplete=\"current-password\"\n          error={'password' in errors}\n          helperText={errors.password?.message}\n          {...register('password')}\n        />\n        <Button variant=\"contained\" onClick={handleSubmit(onSubmit)}>\n          ログイン\n        </Button>\n      </Stack>\n    </Container>\n  );\n};\n\nexport default LoginPresenter;\n","import { VFC } from 'react';\nimport { useLogin } from '../../../contexts/auth/AuthUserContext';\nimport LoginPresenter from './LoginPresenter';\n\nconst Login: VFC = () => {\n  const login = useLogin();\n\n  const onLogin = (staffId: string, password: string) => {\n    void login({ staffId, password });\n  };\n\n  return <LoginPresenter onLogin={onLogin} />;\n};\n\nexport default Login;\n","import { VFC } from 'react';\nimport {\n  AppBar,\n  Box,\n  Grid,\n  IconButton,\n  Toolbar,\n  Typography,\n} from '@mui/material';\nimport MenuIcon from '@mui/icons-material/Menu';\nimport { useAuthUser } from '../../../contexts/auth/AuthUserContext';\n\ntype Props = {\n  onDrawerToggle: () => void;\n};\n\nconst Header: VFC<Props> = ({ onDrawerToggle }) => {\n  const auth = useAuthUser();\n\n  return (\n    <>\n      <Box sx={{ flexGrow: 1 }}>\n        <AppBar position=\"static\">\n          <Toolbar>\n            <Grid container spacing={1} alignItems=\"center\">\n              <Grid sx={{ display: { sm: 'none', xs: 'block' } }} item>\n                <IconButton\n                  size=\"large\"\n                  edge=\"start\"\n                  color=\"inherit\"\n                  aria-label=\"menu\"\n                  sx={{ mr: 2 }}\n                  onClick={onDrawerToggle}\n                >\n                  <MenuIcon />\n                </IconButton>\n              </Grid>\n              <Grid item>\n                <Typography>メインメニュー</Typography>\n              </Grid>\n              <Grid item xs />\n              <Grid item>\n                <Typography>{auth ? `${auth.staffName}` : ''}</Typography>\n              </Grid>\n            </Grid>\n          </Toolbar>\n        </AppBar>\n      </Box>\n    </>\n  );\n};\n\nexport default Header;\n","import { VFC } from 'react';\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport {\n  Button,\n  Card,\n  CardActions,\n  CardContent,\n  Typography,\n} from '@mui/material';\nimport { useNavigate } from 'react-router-dom';\nimport LauncherMenuDefinition from './LauncherMenuDefinition.json';\n\ntype LauncherMenuProps = {\n  displayName: string;\n  description: string;\n  navigation: string;\n};\n\nconst menus: LauncherMenuProps[] = LauncherMenuDefinition;\n\nconst MenuCardContent: VFC<LauncherMenuProps> = ({\n  displayName,\n  description,\n  navigation,\n}) => {\n  const navigate = useNavigate();\n\n  return (\n    <>\n      <CardContent>\n        <Typography variant=\"h5\" component=\"div\">\n          {displayName}\n        </Typography>\n        <Typography sx={{ mb: 1.5 }} color=\"text.secondary\">\n          {description}\n        </Typography>\n      </CardContent>\n      <CardActions>\n        <Button\n          variant=\"contained\"\n          size=\"large\"\n          onClick={() => navigate(navigation)}\n        >\n          Start\n        </Button>\n      </CardActions>\n    </>\n  );\n};\n\nconst LauncherMenuList: VFC = () => (\n  <Box sx={{ flexGrow: 1 }}>\n    <Grid container spacing={1}>\n      {menus.map(({ displayName, description, navigation }) => (\n        <Grid item xs={6} key={displayName}>\n          <Card variant=\"outlined\">\n            <MenuCardContent\n              displayName={displayName}\n              description={description}\n              navigation={navigation}\n            />\n          </Card>\n        </Grid>\n      ))}\n    </Grid>\n  </Box>\n);\n\nexport default LauncherMenuList;\n","import { VFC } from 'react';\nimport List from '@mui/material/List';\nimport Avatar from '@mui/material/Avatar';\nimport Drawer from '@mui/material/Drawer';\nimport Divider from '@mui/material/Divider';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText';\n\nimport ShareIcon from '@mui/icons-material/Share';\nimport PersonIcon from '@mui/icons-material/Person';\n\nimport { styled } from '@mui/material/styles';\nimport { indigo, pink } from '@mui/material/colors';\n\nimport pjson from '../../../../package.json';\n\ntype Props = {\n  drawerOpen: boolean;\n  toggleDrawer: () => void;\n  onOpen: () => void;\n};\n\nconst DrawerList = styled('div')(() => ({\n  width: 250,\n}));\n\nconst DrawerHeader = styled('div')(() => ({\n  height: 150,\n  display: 'flex',\n  flexDirection: 'column',\n  justifyContent: 'center',\n  alignItems: 'center',\n  padding: '1em',\n  backgroundColor: indigo[500],\n  color: '#ffffff',\n}));\n\nconst DrawerAvatar = styled(Avatar)(({ theme }) => ({\n  backgroundColor: pink[500],\n  width: theme.spacing(6),\n  height: theme.spacing(6),\n}));\n\nconst SideBar: VFC<Props> = ({ drawerOpen = false, toggleDrawer, onOpen }) => (\n  <Drawer variant=\"temporary\" open={drawerOpen} onClose={toggleDrawer}>\n    <DrawerList role=\"presentation\" onClick={toggleDrawer}>\n      <DrawerHeader>\n        <DrawerAvatar>\n          <PersonIcon />\n        </DrawerAvatar>\n        <p>TODO v{pjson.version}</p>\n      </DrawerHeader>\n      <List>\n        <Divider />\n        <ListItem button onClick={onOpen} aria-label=\"share\">\n          <ListItemIcon>\n            <ShareIcon />\n          </ListItemIcon>\n          <ListItemText secondary=\"このアプリを共有\" />\n        </ListItem>\n      </List>\n    </DrawerList>\n  </Drawer>\n);\n\nexport default SideBar;\n","import { VFC } from 'react';\nimport Header from '../../oraganisms/Header/Header';\nimport LauncherMenuList from '../../oraganisms/LauncherMenuList/LauncherMenuList';\nimport SideBar from '../../oraganisms/SideBar/SideBar';\n\ntype Props = {\n  drawerOpen: boolean;\n  toggleDrawer: () => void;\n  onLogout: () => void;\n};\n\nconst MainMenuPresenter: VFC<Props> = ({\n  drawerOpen,\n  toggleDrawer,\n  onLogout,\n}) => (\n  <>\n    <Header onDrawerToggle={toggleDrawer} />\n    <LauncherMenuList />\n    <SideBar\n      drawerOpen={drawerOpen}\n      toggleDrawer={toggleDrawer}\n      onOpen={onLogout}\n    />\n  </>\n);\n\nexport default MainMenuPresenter;\n","import { VFC, useState } from 'react';\nimport { useLogout } from '../../../contexts/auth/AuthUserContext';\nimport MainMenuPresenter from './MainMenuPresenter';\n\nconst MainMenu: VFC = () => {\n  const [drawerOpen, setDrawerOpen] = useState(false);\n  const logout = useLogout();\n\n  const toggleDrawer = () => setDrawerOpen(!drawerOpen);\n  const onLogout = () => logout();\n\n  return (\n    <MainMenuPresenter\n      drawerOpen={drawerOpen}\n      toggleDrawer={toggleDrawer}\n      onLogout={onLogout}\n    />\n  );\n};\n\nexport default MainMenu;\n","import { VFC } from 'react';\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\n\nimport { styled } from '@mui/material/styles';\nimport { Typography } from '@mui/material';\n\ntype Props = {\n  message: string;\n  alertOpen: boolean;\n  toggleAlert: () => void;\n  onEmpty: () => void;\n};\n\nconst Alert = styled(Dialog)(() => ({\n  fontFamily: '-apple-system, BlinkMacSystemFont, Roboto, sans-serif',\n}));\n\nconst AlertDialog: VFC<Props> = ({\n  message = '本当にごみ箱を完全に空にしますか？',\n  alertOpen,\n  toggleAlert,\n  onEmpty,\n}) => (\n  <Alert open={alertOpen} onClose={toggleAlert}>\n    <DialogTitle>バーコード読取</DialogTitle>\n    <DialogContent>\n      <DialogContentText>\n        {message\n          .split(/(\\n)/)\n          .filter((item) => /\\n/.exec(item) === null)\n          .map((item) => (\n            <Typography>{item}</Typography>\n          ))}\n      </DialogContentText>\n    </DialogContent>\n    <DialogActions>\n      <Button onClick={toggleAlert} color=\"primary\" aria-label=\"cancel\">\n        キャンセル\n      </Button>\n      <Button\n        onClick={() => {\n          toggleAlert();\n          onEmpty();\n        }}\n        color=\"secondary\"\n        aria-label=\"ok\"\n        autoFocus\n      >\n        OK\n      </Button>\n    </DialogActions>\n  </Alert>\n);\n\nexport default AlertDialog;\n","// eslint-disable-next-line no-unused-vars\nimport { VFC, useState, useEffect } from 'react';\nimport Quagga from '@ericblade/quagga2';\nimport AlertDialog from '../../molecules/ErrorDialog/AlertDialog';\n\ntype Props = {\n  onScan?: (code: string) => void;\n};\n\nconst BarcodeReader: VFC<Props> = ({ onScan }) => {\n  const [scanResult, setScanResult] = useState<string>('');\n  const [sameScanCount, setSameScanCount] = useState<number>(0);\n  const [open, setOpen] = useState<boolean>(false);\n\n  const handleDetected = (data: { codeResult: { code: string | null } }) => {\n    const { code } = data.codeResult;\n\n    if (code == null) {\n      return;\n    }\n\n    if (code === scanResult) {\n      setSameScanCount((c) => c + 1);\n    }\n\n    setScanResult((before) => {\n      if (code === before) {\n        setSameScanCount((c) => c + 1);\n      }\n\n      return code;\n    });\n    setOpen(false);\n\n    // setOpen(false);\n  };\n\n  useEffect(() => {\n    if (onScan && sameScanCount >= 3) {\n      // 読み取り\n      setSameScanCount(0);\n      onScan(scanResult);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [sameScanCount]);\n\n  useEffect(() => {\n    void Quagga.init(\n      {\n        inputStream: {\n          type: 'LiveStream',\n          constraints: {\n            width: { min: 480 },\n            height: { min: 200 },\n            facingMode: 'environment',\n            aspectRatio: { min: 1, max: 1 },\n          },\n        },\n        locator: {\n          patchSize: 'medium',\n          halfSample: false,\n        },\n        numOfWorkers: 2,\n        frequency: 10,\n        decoder: {\n          readers: ['codabar_reader', 'ean_reader', 'code_128_reader'],\n        },\n        locate: true,\n      },\n      (_) => {\n        // if (err) {\n        //   console.log(err, 'error msg');\n        // }\n\n        Quagga.start();\n\n        return () => {\n          void Quagga.stop();\n        };\n      },\n    );\n\n    Quagga.onDetected(handleDetected);\n\n    return () => {\n      void Quagga.stop();\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    // If you do not specify a target,\n    // QuaggaJS would look for an element that matches\n    // the CSS selector #interactive.viewport\n    <>\n      <div id=\"interactive\" className=\"viewport\" />\n      <p>{scanResult || '読み取り中...'}</p>\n      <AlertDialog\n        message={scanResult || 'empty'}\n        alertOpen={open}\n        onEmpty={() => setOpen(false)}\n        toggleAlert={() => setScanResult('')}\n      />\n    </>\n  );\n};\n\nexport default BarcodeReader;\n","import { FC } from 'react';\nimport { Box, Grid, InputAdornment, TextField } from '@mui/material';\nimport { AccountCircle } from '@mui/icons-material';\nimport AlertDialog from '@/components/molecules/ErrorDialog/AlertDialog';\nimport Header from '@/components/oraganisms/Header/Header';\nimport SideBar from '@/components/oraganisms/SideBar/SideBar';\nimport BarcodeReader from '@/components/oraganisms/BarcodeReader/BarcodeReader';\n\ntype Props = {\n  drawerOpen: boolean;\n  toggleDrawer: () => void;\n  onLogout: () => void;\n  patientId: string;\n  orderId: string;\n  onScan: (code: string) => void;\n  dialogOpen: boolean;\n  setDialogOpen: (dialogOpen: boolean) => void;\n  transit: () => void;\n};\n\nconst InjectionCheckPresenter: FC<Props> = ({\n  drawerOpen,\n  patientId,\n  orderId,\n  dialogOpen,\n  toggleDrawer,\n  onLogout,\n  onScan,\n  setDialogOpen,\n  transit,\n}) => (\n  <>\n    <Header onDrawerToggle={toggleDrawer} />\n    <SideBar\n      drawerOpen={drawerOpen}\n      toggleDrawer={toggleDrawer}\n      onOpen={onLogout}\n    />\n    <AlertDialog\n      alertOpen={dialogOpen}\n      message={`患者ID：${patientId}\n      オーダID：${orderId}`}\n      toggleAlert={() => {\n        setDialogOpen(false);\n      }}\n      onEmpty={() => {\n        setDialogOpen(false);\n        transit();\n      }}\n    />\n    <Box\n      paddingTop=\"25px\"\n      sx={{\n        flexGrow: 1,\n      }}\n    >\n      <Grid container spacing={2}>\n        <Grid item xs={6}>\n          <TextField\n            id=\"patient-id\"\n            label=\"患者ID\"\n            color=\"success\"\n            value={patientId}\n            focused={!!patientId}\n            InputProps={{\n              startAdornment: (\n                <InputAdornment position=\"start\">\n                  <AccountCircle />\n                </InputAdornment>\n              ),\n            }}\n            fullWidth\n          />\n        </Grid>\n        <Grid item xs={6}>\n          <TextField\n            id=\"order-id\"\n            label=\"オーダID\"\n            color=\"success\"\n            value={orderId}\n            focused={!!orderId}\n            fullWidth\n          />\n        </Grid>\n        <Grid item xs={12}>\n          <BarcodeReader onScan={onScan} />\n        </Grid>\n      </Grid>\n    </Box>\n  </>\n);\n\nexport default InjectionCheckPresenter;\n","import { FC, useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useLogout } from '@/contexts/auth/AuthUserContext';\nimport InjectionCheckPresenter from '@/components/pages/InjectionCheck/InjectionCheckPresenter';\n\nconst InjectionCheck: FC = () => {\n  const [drawerOpen, setDrawerOpen] = useState<boolean>(false);\n  const [patientId, setPatientId] = useState<string>('');\n  const [orderId, setOrderId] = useState<string>('');\n  const [inputCode, setInputCode] = useState<string>('');\n  const [dialogOpen, setDialogOpen] = useState<boolean>(false);\n\n  const logout = useLogout();\n  const navigate = useNavigate();\n  const toggleDrawer = () => setDrawerOpen(!drawerOpen);\n  const onLogout = () => logout();\n\n  const onScan = (code: string) => {\n    const zeroSuppressCode = Number(code);\n\n    setInputCode(String(zeroSuppressCode));\n  };\n\n  useEffect(() => {\n    if (!patientId) {\n      setPatientId(inputCode);\n    } else if (!orderId) {\n      setOrderId(inputCode);\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [inputCode]);\n\n  useEffect(() => {\n    if (patientId && orderId) {\n      setDialogOpen(true);\n    }\n  }, [orderId, patientId]);\n\n  return (\n    <InjectionCheckPresenter\n      drawerOpen={drawerOpen}\n      toggleDrawer={toggleDrawer}\n      onLogout={onLogout}\n      patientId={patientId}\n      orderId={orderId}\n      onScan={onScan}\n      dialogOpen={dialogOpen}\n      setDialogOpen={setDialogOpen}\n      transit={() =>\n        navigate(`/safetyInjectionExecute/${patientId}/${orderId}`)\n      }\n    />\n  );\n};\n\nexport default InjectionCheck;\n","import { FC } from 'react';\nimport { ListItemButton, ListItemText } from '@mui/material';\n\nimport ExpandLess from '@mui/icons-material/ExpandLess';\nimport ExpandMore from '@mui/icons-material/ExpandMore';\nimport { TreeItem } from '@/types/components/nestList/treeItem';\n\ntype Props = {\n  item: TreeItem;\n  isExistChildren: boolean;\n  level: number;\n  onToggle: (isSelect: boolean) => void;\n  onItemSelect: (treeItem: TreeItem) => void;\n  open: boolean;\n};\n\nconst NestListNode: FC<Props> = (props) => {\n  const { item, isExistChildren, level, onToggle, onItemSelect, open } = props;\n\n  return (\n    <>\n      <ListItemButton sx={{ pl: 4 * level }}>\n        <ListItemText\n          primary={item.value}\n          onClick={\n            isExistChildren ? () => onToggle(!open) : () => onItemSelect(item)\n          }\n        />\n        {isExistChildren && (open ? <ExpandLess /> : <ExpandMore />)}\n      </ListItemButton>\n    </>\n  );\n};\n\nexport default NestListNode;\n","import { FC, useState } from 'react';\nimport { List, Collapse } from '@mui/material';\nimport NestListNode from '@/components/oraganisms/NestList/NestListNode';\nimport { TreeItem } from '@/types/components/nestList/treeItem';\n\ntype Props = {\n  item: TreeItem;\n  level: number;\n  nestListItemClickAction: (treeItem: TreeItem) => void;\n};\n\nconst NestListBranch: FC<Props> = (props) => {\n  const { item, level, nestListItemClickAction } = props;\n\n  const isExistChildren =\n    item.children !== null &&\n    item.children !== undefined &&\n    item.children.length !== 0;\n\n  const [open, setOpen] = useState(false);\n\n  const renderBranches = () => {\n    if (isExistChildren) {\n      const newLevel = level + 1;\n\n      return item.children?.map((child) => (\n        <Collapse in={open} timeout=\"auto\" unmountOnExit>\n          <List disablePadding>\n            <NestListBranch\n              key={child?.itemId}\n              item={child}\n              level={newLevel}\n              nestListItemClickAction={nestListItemClickAction}\n            />\n          </List>\n        </Collapse>\n      ));\n    }\n\n    return null;\n  };\n\n  return (\n    <>\n      <NestListNode\n        item={item}\n        isExistChildren={isExistChildren}\n        level={level}\n        onToggle={setOpen}\n        onItemSelect={nestListItemClickAction}\n        open={open}\n      />\n\n      {open && renderBranches()}\n    </>\n  );\n};\n\nexport default NestListBranch;\n","import { FC } from 'react';\nimport NestListBranch from './NestListBranch';\nimport { TreeItem } from '@/types/components/nestList/treeItem';\n\ntype Props = {\n  treeItems: TreeItem[];\n  nestListItemClickAction: (treeItem: TreeItem) => void;\n};\n\nconst NestListTree: FC<Props> = (props) => {\n  const { treeItems, nestListItemClickAction } = props;\n\n  return (\n    <>\n      {treeItems.map((item) => (\n        <NestListBranch\n          key={item.itemId}\n          item={item}\n          level={0}\n          nestListItemClickAction={nestListItemClickAction}\n        />\n      ))}\n    </>\n  );\n};\n\nexport default NestListTree;\n","import { FC } from 'react';\nimport { List, ListSubheader } from '@mui/material';\nimport NestListTree from '@/components/oraganisms/NestList/NestListTree';\nimport { TreeItem } from '@/types/components/nestList/treeItem';\n\ntype Props = {\n  listDatas: TreeItem[];\n  nestListItemClickAction: (injectionRouteName: TreeItem) => void;\n};\n\nconst InjectionRouteNestList: FC<Props> = ({\n  nestListItemClickAction,\n  listDatas,\n}) => {\n  // ネストリストの末端の項目を選択した時のアクション\n  const nestListItemClick = (treeItem: TreeItem) => {\n    nestListItemClickAction(treeItem);\n  };\n\n  return (\n    <>\n      <List\n        sx={{ width: '100%', maxWidth: 360, bgcolor: 'background.paper' }}\n        component=\"nav\"\n        aria-labelledby=\"nested-list-subheader\"\n        subheader={\n          <ListSubheader component=\"div\" id=\"nested-list-subheader\">\n            投与ルート選択\n          </ListSubheader>\n        }\n      >\n        <NestListTree\n          treeItems={listDatas}\n          nestListItemClickAction={nestListItemClick}\n        />\n      </List>\n    </>\n  );\n};\n\nexport default InjectionRouteNestList;\n","import ky from 'ky';\nimport { ExecuteResult } from '@/components/pages/InjectionExecute/executeResult';\nimport { InjectionExecutePatch } from '@/components/pages/InjectionExecute/injectionExecutePatch';\n\nconst doExecution = async (\n  execute: InjectionExecutePatch,\n): Promise<boolean> => {\n  try {\n    await ky\n      .post(`http://localhost:8080/jerseywebapp/rest/order/injection`, {\n        json: execute,\n        timeout: false,\n      })\n      .json<ExecuteResult>();\n\n    return true;\n  } catch (err) {\n    // eslint-disable-next-line no-alert\n    alert(err);\n\n    return false;\n  }\n};\n\nexport default doExecution;\n","import { VFC } from 'react';\nimport {\n  Autocomplete,\n  FormControl,\n  FormHelperText,\n  IconButton,\n  Stack,\n  TextField,\n} from '@mui/material';\nimport AddIcon from '@mui/icons-material/Add';\n\ntype Props = {\n  staffNames: string[];\n  handleClickIcon: () => void;\n  handleOnChange: (input: string | null) => void;\n  staffName?: string;\n  label?: string;\n  error?: boolean;\n  helperText?: string;\n  disabled?: boolean;\n};\n\nconst StaffSelectPresenter: VFC<Props> = ({\n  staffNames,\n  handleClickIcon,\n  handleOnChange,\n  staffName,\n  label,\n  error,\n  helperText,\n  disabled,\n}) => (\n  <>\n    <FormControl error={error}>\n      <Stack spacing={0}>\n        <Stack direction=\"row\" spacing={0}>\n          <Autocomplete\n            id=\"combo-box-demo\"\n            options={staffNames}\n            value={staffName}\n            onChange={(_, newValue: string | null) => handleOnChange(newValue)}\n            sx={{ width: 300 }}\n            renderInput={(params) => (\n              <TextField {...params} error={error} label={label} />\n            )}\n            disabled={disabled}\n          />\n          {!disabled && (\n            <IconButton\n              color=\"primary\"\n              component=\"span\"\n              onClick={handleClickIcon}\n            >\n              <AddIcon />\n            </IconButton>\n          )}\n        </Stack>\n        <FormHelperText>{helperText}</FormHelperText>\n      </Stack>\n    </FormControl>\n  </>\n);\nexport default StaffSelectPresenter;\n","import { VFC, useEffect, useState } from 'react';\nimport ky from '@/lib/ky';\nimport StaffSelectPresenter from './StaffSelectPresenter';\nimport Staff from '../../../types/staff';\nimport { useAuthUser } from '../../../contexts/auth/AuthUserContext';\n\ntype Props = {\n  onChange?: (staff?: Staff) => void;\n  label?: string;\n  defaultStaffId?: number;\n  error?: boolean;\n  helperText?: string;\n  disabled?: boolean;\n};\n\ntype StaffResult = {\n  staffs: Staff[];\n};\n\nconst getStaffName = (staff: Staff): string => {\n  const { staffId, firstName, lastName } = staff;\n\n  return `${lastName} ${firstName} (ID:${staffId})`;\n};\n\nconst getStaffNameById = (staffs: Staff[], staffId?: number): string => {\n  if (!staffId) {\n    return '';\n  }\n\n  const targetStaff = staffs.find((s) => s.staffId === staffId);\n\n  if (targetStaff) {\n    return getStaffName(targetStaff);\n  }\n\n  return '';\n};\n\nconst StaffSelect: VFC<Props> = ({\n  defaultStaffId = 0,\n  label = '',\n  onChange,\n  error,\n  helperText,\n  disabled = false,\n}) => {\n  const [staffs, setStaffs] = useState<Staff[]>([]);\n  const [staffNames, setStaffNames] = useState<string[]>([]);\n  const auth = useAuthUser();\n\n  useEffect(() => {\n    const loadStaffs = async (): Promise<void> => {\n      try {\n        const staffsResult = await ky.get(`staffs`).json<StaffResult>();\n\n        setStaffs(staffsResult.staffs);\n        const staffNameList = staffsResult.staffs.map((s) => getStaffName(s));\n        setStaffNames(staffNameList);\n      } catch (err) {\n        // eslint-disable-next-line no-console\n        console.log('error');\n      } finally {\n        // setIsLoading(false);\n      }\n    };\n\n    void loadStaffs();\n  }, []);\n\n  const staffName = getStaffNameById(staffs, defaultStaffId);\n\n  const handleClickIcon = () => {\n    if (auth) {\n      const targetStaff = staffs.find(\n        (s) => String(s.staffId) === auth.staffId,\n      );\n\n      if (targetStaff && onChange) {\n        onChange(targetStaff);\n      }\n    }\n  };\n\n  const handleOnChange = (input: string | null): void => {\n    const targetStaff = staffs.find((s) => input === getStaffName(s));\n    if (onChange) {\n      onChange(targetStaff);\n    }\n  };\n\n  return (\n    <StaffSelectPresenter\n      staffNames={staffNames}\n      handleClickIcon={handleClickIcon}\n      handleOnChange={handleOnChange}\n      staffName={staffName}\n      label={label}\n      error={error}\n      helperText={helperText}\n      disabled={disabled}\n    />\n  );\n};\n\nexport default StaffSelect;\n","import { FC, useEffect, useState } from 'react';\nimport {\n  TextField,\n  Button,\n  Grid,\n  InputAdornment,\n  Dialog,\n  Autocomplete,\n  Stack,\n} from '@mui/material';\nimport { isAfter, isBefore } from 'date-fns';\nimport ky from 'ky';\nimport InjectionRouteNestList from '@/components/oraganisms/InjectionRouteNestList/InjectionRouteNestList';\nimport { TreeItem } from '@/types/components/nestList/treeItem';\nimport Staff from '@/types/staff';\nimport StaffSelect from '@/components/oraganisms/StaffSelect/StaffSelect';\nimport { useAuthUser } from '@/contexts/auth/AuthUserContext';\nimport { InjectionExecute } from '@/types/order/injection/injectionExecute';\nimport { Comment } from '@/types/order/injection/injectionComment';\n\ntype Prop = {\n  defaultExecute: InjectionExecute;\n  onInput: (input: InjectionExecute, isEndFlg: boolean) => void;\n  executes: InjectionExecute[];\n  isShowRemainAmount: boolean;\n  totalAmount: number;\n  reserveDate: string;\n};\n\ntype Result = {\n  executeCommentItems: Comment[];\n  endCommentItems: Comment[];\n  routeNestDatas: TreeItem[];\n};\n\nconst DropExecuteItemInput: FC<Prop> = ({\n  defaultExecute,\n  onInput,\n  executes,\n  isShowRemainAmount,\n  totalAmount,\n  reserveDate,\n}) => {\n  const [dropRecordId, setDropRecordId] = useState(\n    defaultExecute.injectionExecutionId,\n  );\n  const auth = useAuthUser();\n\n  // 投与ルートネストリストダイアログ\n  const [openInjectionRouteDialog, setOpenInjectionRouteDialog] =\n    useState(false);\n\n  const injectionRouteNestListOpen = () => {\n    setOpenInjectionRouteDialog(!openInjectionRouteDialog);\n  };\n\n  const [injectionRouteId, setInjectionRouteId] = useState(\n    defaultExecute.injectionRouteMstId,\n  );\n\n  const [nestListDatas, setNestListDatas] = useState<TreeItem[]>([]);\n\n  // 投与ルート\n  const onClickInjectionRoute = () => {\n    injectionRouteNestListOpen();\n  };\n\n  const [injectionRouteName, setInjectionRouteName] = useState<\n    string | undefined\n  >(undefined);\n\n  const setInjectionRoute = (injectionRouteData: TreeItem): void => {\n    setInjectionRouteId(injectionRouteData.itemId);\n    setInjectionRouteName(injectionRouteData.value);\n    injectionRouteNestListOpen();\n  };\n\n  // 点滴速度\n  const [dropSpeed, setDropSpeed] = useState<number | undefined>(\n    defaultExecute.executionDropSpeed,\n  );\n\n  const onChangeDropSpeed = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setDropSpeed(\n      Number(event.target.value) < 0 ? 0 : Number(event.target.value),\n    );\n  };\n\n  // 実施開始日\n  const [startDate, setStartDate] = useState(defaultExecute.executionStartDate);\n\n  const setupStartStaffId = (): number => {\n    if (\n      defaultExecute.executionStartId !== undefined &&\n      defaultExecute.executionStartId !== 0\n    ) {\n      return defaultExecute.executionStartId;\n    }\n    if (auth) {\n      return Number(auth.staffId);\n    }\n\n    return 0;\n  };\n\n  // 実施開始者\n  const [startStaff, setStartStaff] = useState<Staff>();\n\n  // 実施終了日\n  const [endDate, setEndDate] = useState(defaultExecute.executionEndDate);\n\n  // 実施終了者\n  const [endStaff, setEndStaff] = useState<Staff>();\n\n  // 実施コメント\n\n  const [executeCommentId, setExecuteCommentId] = useState<number | undefined>(\n    defaultExecute.executionCommentId,\n  );\n\n  const [executeCommentValue, setExecuteCommentValue] = useState<\n    string | undefined\n  >(defaultExecute.executionFreeComment);\n\n  // 投与量\n  const [amount, setAmount] = useState<number | undefined>(\n    defaultExecute.executionAmount,\n  );\n\n  const onChangeAmount = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setAmount(Number(event.target.value));\n  };\n\n  // 残\n  const [remainAmount, setRemainAmount] = useState<number | undefined>(0);\n\n  const onChangeRemainAmount = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setRemainAmount(Number(event.target.value));\n  };\n\n  // 終了コメント\n  const [endCommentId, setEndCommentId] = useState<number | undefined>(\n    defaultExecute.endCommentId,\n  );\n\n  const [endCommentValue, setEndCommentValue] = useState<string | undefined>(\n    defaultExecute.endFreeComment,\n  );\n\n  const [endCommentDatas, setEndCommentDatas] = useState<Comment[]>([]);\n\n  const [executeCommentDatas, setExecuteCommentDatas] = useState<Comment[]>([]);\n\n  // エラー状態管理用のstate\n\n  const [injectionRouteError, setInjectionRouteError] = useState(false);\n\n  const [injectionRouteErrorHelperText, setInjectionRouteErrorHelperText] =\n    useState('');\n\n  const [dropSpeedError, setDropSpeedError] = useState(false);\n\n  const [dropSpeedErrorHelperText, setDropSpeedErrorHelperText] = useState('');\n\n  const [startDateError, setStartDateError] = useState(false);\n\n  const [startDateErrorHelperText, setStartDateErrorHelperText] = useState('');\n\n  const [startStaffError, setStartStaffError] = useState(false);\n\n  const [startStaffErrorHelperText, setStartStaffErrorHelperText] =\n    useState('');\n\n  const [endStaffError, setEndStaffError] = useState(false);\n\n  const [endStaffErrorHelperText, setEndStaffErrorHelperText] = useState('');\n\n  const [amountError, setAmountError] = useState(false);\n\n  const [amountErrorHelperText, setAmountErrorHelperText] = useState('');\n\n  const [endDateError, setEndDateError] = useState(false);\n\n  const [endDateErrorHelperText, setEndDateErrorHelperText] = useState('');\n\n  const onClickDosagaCal = () => {\n    // 点滴速度、開始・終了日時、投与量の入力チェック\n\n    const isDropSpeedInputError: boolean =\n      dropSpeed === undefined || dropSpeed === 0;\n\n    setDropSpeedError(isDropSpeedInputError);\n    setDropSpeedErrorHelperText(\n      isDropSpeedInputError ? '点滴速度を入力してください。' : '',\n    );\n\n    const isStartDateInputError: boolean = startDate == null;\n\n    setStartDateError(isStartDateInputError);\n    setStartDateErrorHelperText(\n      isStartDateInputError ? '実施開始日時を指定してください。' : '',\n    );\n\n    const isEndDateInputError: boolean = endDate == null;\n\n    setEndDateError(isEndDateInputError);\n    setEndDateErrorHelperText(\n      isEndDateInputError ? '実施終了日時を指定してください。' : '',\n    );\n\n    const isEndDateFutureDateError =\n      startDate != null &&\n      endDate != null &&\n      isAfter(new Date(startDate), new Date(endDate));\n\n    if (endDate != null) {\n      setEndDateError(isEndDateFutureDateError);\n      setEndDateErrorHelperText(\n        isEndDateFutureDateError\n          ? '実施終了日時には実施開始日時以降を指定してください。'\n          : '',\n      );\n    }\n\n    if (\n      !isDropSpeedInputError &&\n      !isStartDateInputError &&\n      !isEndDateInputError &&\n      !isEndDateFutureDateError &&\n      typeof dropSpeed === 'number' &&\n      typeof startDate === 'string' &&\n      typeof endDate === 'string'\n    ) {\n      // 差分を秒で取得\n      const second: number =\n        new Date(startDate).getTime() === new Date(endDate).getTime()\n          ? 0\n          : (new Date(endDate).getTime() - new Date(startDate).getTime()) /\n            1000;\n\n      // 時間に変換\n      const mintes: number = second / 60;\n      const time: number = mintes / 60;\n\n      const resultAmount = dropSpeed * time;\n\n      setAmount(Number(resultAmount.toFixed(3)));\n    }\n  };\n\n  const isImiidateEnd = (): boolean =>\n    executes.length === 0 ||\n    (executes.length === 1 &&\n      executes.some((e) => e.injectionExecutionId === dropRecordId));\n\n  // 入力チェック\n  const inputCheck = (isEndAdd: boolean): boolean => {\n    // 追加済みの実施がある場合、追加するには前の実施が終了している必要あり\n    let lastRow: InjectionExecute = {};\n\n    let isNotFinishError: boolean;\n\n    if (executes.length > 0) {\n      let lastRowIndex = -1;\n      if (dropRecordId === 0) {\n        // 新規の場合は最終行を対象とする\n        lastRowIndex = executes.length - 1;\n      } else if (\n        executes.some((e) => e.injectionExecutionId === dropRecordId)\n      ) {\n        // 編集の場合は一つ前の行インデックスを取得(2行目以降)\n        lastRowIndex =\n          executes.findIndex((e) => e.injectionExecutionId === dropRecordId) -\n          1;\n      }\n\n      if (lastRowIndex >= 0) {\n        lastRow = executes[lastRowIndex];\n        if (!lastRow.executionEndDate) {\n          isNotFinishError = true;\n          setEndDateError(isNotFinishError);\n          setEndDateErrorHelperText('前の実施が終了されていません。');\n\n          return false;\n        }\n        isNotFinishError = false;\n        setEndDateError(isNotFinishError);\n        setEndDateErrorHelperText('');\n      }\n    }\n\n    const isInjectionRouteInputError = injectionRouteId === 0;\n\n    // 投与ルートの入力チェック\n    setInjectionRouteError(isInjectionRouteInputError);\n    setInjectionRouteErrorHelperText(\n      isInjectionRouteInputError ? '投与ルートを指定してください。' : '',\n    );\n\n    // 実施開始日入力チェック\n    let isStartDateError: boolean;\n    if (startDate == null) {\n      isStartDateError = true;\n      setStartDateError(isStartDateError);\n      setStartDateErrorHelperText('実施開始日時を指定してください。');\n    } else if (\n      lastRow !== {} &&\n      typeof lastRow.executionEndDate === 'string' &&\n      isBefore(new Date(startDate), new Date(lastRow.executionEndDate))\n    ) {\n      isStartDateError = true;\n      setStartDateError(isStartDateError);\n      setStartDateErrorHelperText('実施期間が重複しています。');\n    } else if (isAfter(new Date(startDate), new Date())) {\n      isStartDateError = true;\n      setStartDateError(isStartDateError);\n      setStartDateErrorHelperText('実施開始日時に未来日は指定できません。');\n    } else {\n      isStartDateError = false;\n      setStartDateError(isStartDateError);\n      setStartDateErrorHelperText('');\n    }\n\n    // 実施開始者入力チェック\n    const isStartStaffInputError = startStaff?.staffId === 0;\n    setStartStaffError(isStartStaffInputError);\n    setStartStaffErrorHelperText(\n      isStartStaffInputError ? '開始者を指定してください。' : '',\n    );\n\n    // 投与量入力チェック\n    const isAmountInputError = typeof amount === 'number' && amount > 9999.999;\n    setAmountError(isAmountInputError);\n    setAmountErrorHelperText(\n      isAmountInputError\n        ? '投与量は、整数4ケタ、小数3ケタ以内で入力してください。'\n        : '',\n    );\n\n    let isEndDateError: boolean;\n    let isEndStaffInputError: boolean;\n\n    if (isEndAdd) {\n      // -----------------------------------------------------------------\n      // 終了追加の場合\n      // -----------------------------------------------------------------\n      // ⇒ 簡易的な入力を許容するため、即終了(*)の場合は\n      // 終了日の必須チェックを無しとします。\n      // ※終了日が省略された場合、終了日＝開始日 として保存されます。\n      // この場合、速度行では、ワンショットと同じ形式で表示されます。\n      //\n      // (*) 即終了：施用が１つしかない状態で、終了追加された場合\n      // -----------------------------------------------------------------\n\n      if (endDate == null && !isImiidateEnd) {\n        isEndDateError = true;\n        setEndDateError(isEndDateError);\n        setEndDateErrorHelperText('実施終了日時を指定してください。');\n      } else if (\n        endDate != null &&\n        startDate != null &&\n        isAfter(new Date(startDate), new Date(endDate))\n      ) {\n        isEndDateError = true;\n        setEndDateError(isEndDateError);\n        setEndDateErrorHelperText(\n          '実施終了日時には実施開始日時以降を指定してください。',\n        );\n      } else if (endDate != null && isAfter(new Date(endDate), new Date())) {\n        isEndDateError = true;\n        setEndDateError(isEndDateError);\n        setEndDateErrorHelperText('実施終了日時に未来日は指定できません。');\n      } else {\n        isEndDateError = false;\n        setEndDateError(isEndDateError);\n        setEndDateErrorHelperText('');\n      }\n\n      isEndStaffInputError = endStaff?.staffId === 0 && !!isImiidateEnd;\n      setEndStaffError(isEndStaffInputError);\n      setEndStaffErrorHelperText(\n        isEndStaffInputError ? '実施終了者を指定してください。' : '',\n      );\n    } else {\n      // --------------------------------------------\n      // 追加の場合\n      // --------------------------------------------\n      // 実施終了日時・実施終了者の整合性チェック\n      if (endDate == null) {\n        isEndDateError = true;\n        setEndDateError(isEndDateError);\n        setEndDateErrorHelperText('実施終了日時を指定してください。');\n      } else if (\n        endDate != null &&\n        startDate != null &&\n        isAfter(new Date(startDate), new Date(endDate))\n      ) {\n        isEndDateError = true;\n        setEndDateError(isEndDateError);\n        setEndDateErrorHelperText(\n          '実施終了日時には実施開始日時以降を指定してください。',\n        );\n      } else if (endDate != null && isAfter(new Date(endDate), new Date())) {\n        isEndDateError = true;\n        setEndDateError(isEndDateError);\n        setEndDateErrorHelperText('実施終了日時に未来日は指定できません。');\n      } else {\n        isEndDateError = false;\n        setEndDateError(isEndDateError);\n        setEndDateErrorHelperText('');\n      }\n\n      isEndStaffInputError = endStaff?.staffId === 0;\n      setEndStaffError(isEndStaffInputError);\n      setEndStaffErrorHelperText(\n        isEndStaffInputError ? '実施終了者を指定してください。' : '',\n      );\n    }\n\n    const isError = (): boolean =>\n      isNotFinishError ||\n      isInjectionRouteInputError ||\n      isStartDateError ||\n      isStartStaffInputError ||\n      isAmountInputError ||\n      isEndDateError ||\n      isEndStaffInputError;\n\n    if (isError()) {\n      return false;\n    }\n\n    return true;\n  };\n\n  // 追加ボタンを押したときのアクション\n  const doAddButton = () => {\n    if (!inputCheck(false)) {\n      return;\n    }\n    const itemD: InjectionExecute = {\n      injectionExecutionId: dropRecordId,\n      executionStartDate: startDate,\n      injectionRouteMstId: injectionRouteId,\n      executionStartId: startStaff?.staffId,\n      executionEndDate: endDate,\n      executionEndId: endStaff?.staffId,\n      executionCommentId: executeCommentId,\n      executionFreeComment: executeCommentValue,\n      endCommentId,\n      endFreeComment: endCommentValue,\n      executionAmount: amount,\n      executionDropSpeed: dropSpeed,\n    };\n    onInput(itemD, false);\n  };\n\n  const doEndAddButton = () => {\n    if (!inputCheck(true)) {\n      return;\n    }\n    const itemD: InjectionExecute = {\n      injectionExecutionId: dropRecordId,\n      executionStartDate: startDate,\n      injectionRouteMstId: injectionRouteId,\n      executionStartId: startStaff?.staffId,\n      executionEndDate: endDate,\n      executionEndId: endStaff?.staffId,\n      executionCommentId: executeCommentId,\n      executionFreeComment: executeCommentValue,\n      endCommentId,\n      endFreeComment: endCommentValue,\n      executionAmount: amount,\n      executionDropSpeed: dropSpeed,\n    };\n    onInput(itemD, true);\n  };\n\n  useEffect(() => {\n    const load = async (): Promise<void> => {\n      try {\n        const result = await ky\n          .get(\n            'http://localhost:8080/jerseywebapp/rest/order/injection/execute/drop',\n            {\n              searchParams: {\n                reserveDate,\n              },\n            },\n          )\n          .json<Result>();\n\n        setExecuteCommentDatas(result.executeCommentItems);\n        setEndCommentDatas(result.endCommentItems);\n        setNestListDatas(result.routeNestDatas);\n      } catch (err) {\n        throw new Error('error');\n      }\n    };\n\n    void load();\n  }, [reserveDate]);\n\n  useEffect(() => {\n    setDropRecordId(defaultExecute.injectionExecutionId);\n    setInjectionRouteId(defaultExecute.injectionRouteMstId);\n    setInjectionRouteName(\n      nestListDatas.find((e) => e.itemId === defaultExecute.injectionRouteMstId)\n        ?.value,\n    );\n    setDropSpeed(defaultExecute.executionDropSpeed);\n    setStartDate(defaultExecute.executionStartDate);\n    setEndDate(defaultExecute.executionEndDate);\n    setExecuteCommentId(defaultExecute.executionCommentId);\n    setExecuteCommentValue(defaultExecute.executionFreeComment);\n    setAmount(defaultExecute.executionAmount);\n\n    let amountSum = 0;\n\n    executes.forEach((e) => {\n      if (e.executionAmount) {\n        amountSum += e.executionAmount;\n      }\n    });\n\n    const remain: number = totalAmount - amountSum;\n\n    setRemainAmount(remain >= 0 ? remain : 0);\n  }, [nestListDatas, totalAmount, defaultExecute, executes]);\n\n  return (\n    <>\n      <Stack\n        component=\"form\"\n        noValidate\n        spacing={3}\n        paddingLeft=\"18px\"\n        sx={{\n          flexGrow: 1,\n        }}\n      >\n        <Grid container spacing={2} direction=\"column\">\n          <Grid item>\n            <TextField\n              defaultValue=\" \"\n              error={injectionRouteError}\n              helperText={injectionRouteErrorHelperText}\n              id=\"injectionRouteTextField\"\n              label=\"投与ルート\"\n              variant=\"filled\"\n              value={injectionRouteName}\n              onClick={onClickInjectionRoute}\n              InputProps={{\n                readOnly: true,\n              }}\n            />\n            <Dialog\n              open={openInjectionRouteDialog}\n              onClose={injectionRouteNestListOpen}\n            >\n              <InjectionRouteNestList\n                nestListItemClickAction={setInjectionRoute}\n                listDatas={nestListDatas}\n              />\n            </Dialog>\n          </Grid>\n          <Grid item>\n            <TextField\n              error={dropSpeedError}\n              className=\"dropSpeed\"\n              id=\"dropSpeedTextField\"\n              label=\"点滴速度\"\n              variant=\"outlined\"\n              type=\"number\"\n              value={dropSpeed}\n              onChange={onChangeDropSpeed}\n              helperText={dropSpeedErrorHelperText}\n              InputProps={{\n                endAdornment: (\n                  <InputAdornment position=\"end\">ml/時間</InputAdornment>\n                ),\n              }}\n            />\n          </Grid>\n          <Grid item>\n            <TextField\n              label=\"実施開始日時\"\n              type=\"datetime-local\"\n              error={startDateError}\n              helperText={startDateErrorHelperText}\n              value={startDate}\n              sx={{ width: 250 }}\n              InputLabelProps={{\n                shrink: true,\n              }}\n              onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                setStartDate(event.target.value);\n              }}\n            />\n          </Grid>\n          <Grid item>\n            <StaffSelect\n              label=\"開始者\"\n              defaultStaffId={setupStartStaffId()}\n              error={startStaffError}\n              helperText={startStaffErrorHelperText}\n              onChange={(staff?: Staff) => {\n                if (staff !== undefined) {\n                  setStartStaff(staff);\n                }\n              }}\n            />\n          </Grid>\n          <Grid item>\n            <TextField\n              label=\"実施終了日時\"\n              type=\"datetime-local\"\n              error={endDateError}\n              helperText={endDateErrorHelperText}\n              value={endDate}\n              sx={{ width: 250 }}\n              InputLabelProps={{\n                shrink: true,\n              }}\n              onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                setEndDate(event.target.value);\n              }}\n            />\n          </Grid>\n          <Grid item>\n            <StaffSelect\n              label=\"終了者\"\n              error={endStaffError}\n              helperText={endStaffErrorHelperText}\n              onChange={(staff?: Staff) => {\n                if (staff !== undefined) {\n                  setEndStaff(staff);\n                }\n              }}\n            />\n          </Grid>\n          <Grid item>\n            <TextField\n              className=\"amount\"\n              error={amountError}\n              helperText={amountErrorHelperText}\n              id=\"amountTextField\"\n              label=\"投与量\"\n              variant=\"outlined\"\n              type=\"number\"\n              value={amount}\n              onChange={onChangeAmount}\n              InputProps={{\n                endAdornment: (\n                  <InputAdornment position=\"end\">ml</InputAdornment>\n                ),\n              }}\n            />\n            <Button variant=\"contained\" onClick={onClickDosagaCal}>\n              用量計算\n            </Button>\n          </Grid>\n          {isShowRemainAmount && (\n            <Grid item>\n              <TextField\n                className=\"remainAmount\"\n                id=\"remainAmountTextField\"\n                label=\"残量\"\n                variant=\"outlined\"\n                type=\"number\"\n                value={remainAmount}\n                onChange={onChangeRemainAmount}\n                InputProps={{\n                  endAdornment: (\n                    <InputAdornment position=\"end\">ml</InputAdornment>\n                  ),\n                  readOnly: true,\n                }}\n              />\n            </Grid>\n          )}\n          <Grid item>\n            <Autocomplete\n              freeSolo\n              onChange={(event, value) => {\n                if (typeof value === 'string') {\n                  setExecuteCommentId(Number(0));\n                  setExecuteCommentValue(value);\n                } else if (value != null) {\n                  setExecuteCommentId(Number(value?.executeCommentId));\n                  setExecuteCommentValue(value?.content);\n                }\n              }}\n              value={\n                executeCommentId !== 0\n                  ? executeCommentDatas.find(\n                      (e) => Number(e.executeCommentId) === executeCommentId,\n                    )\n                  : executeCommentValue\n              }\n              options={executeCommentDatas}\n              getOptionLabel={(option) =>\n                typeof option === 'string' ? option : option.content\n              }\n              renderInput={(params) => (\n                <TextField {...params} label=\"実施コメント\" />\n              )}\n            />\n          </Grid>\n          <Grid item>\n            <Autocomplete\n              freeSolo\n              onChange={(event, value) => {\n                if (typeof value === 'string') {\n                  setEndCommentId(Number(0));\n                  setEndCommentValue(value);\n                } else if (value != null) {\n                  setEndCommentId(Number(value?.executeCommentId));\n                  setEndCommentValue(value?.content);\n                }\n              }}\n              value={\n                endCommentId !== 0\n                  ? endCommentDatas.find(\n                      (e) => Number(e.executeCommentId) === endCommentId,\n                    )\n                  : endCommentValue\n              }\n              options={endCommentDatas}\n              getOptionLabel={(option) =>\n                typeof option === 'string' ? option : option.content\n              }\n              renderInput={(params) => (\n                <TextField {...params} label=\"終了コメント\" />\n              )}\n            />\n          </Grid>\n          <Grid item>\n            <Button variant=\"contained\" color=\"success\" onClick={doAddButton}>\n              追加\n            </Button>\n            <Button\n              variant=\"contained\"\n              color=\"success\"\n              onClick={doEndAddButton}\n            >\n              終了追加\n            </Button>\n          </Grid>\n        </Grid>\n      </Stack>\n    </>\n  );\n};\n\nexport default DropExecuteItemInput;\n","import { FC, useState } from 'react';\nimport {\n  Card,\n  Typography,\n  CardContent,\n  Grid,\n  IconButton,\n  Dialog,\n  Box,\n  Divider,\n} from '@mui/material/';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport EditIcon from '@mui/icons-material/Edit';\nimport CloseIcon from '@mui/icons-material/Close';\nimport { format } from 'date-fns';\nimport DropExecuteItemInput from './DropExecuteItemInput';\nimport { InjectionExecute } from '@/types/order/injection/injectionExecute';\nimport { InjectionOrder } from '@/types/order/injection/injectionOrder';\n\ntype Props = {\n  itemData: InjectionExecute;\n  onClickDeleteButton: (value: InjectionExecute) => void;\n  itemDataArray: InjectionExecute[];\n  injectionOrder: InjectionOrder;\n  isLastRow: boolean;\n};\n\nconst DropExecuteItem: FC<Props> = ({\n  itemData,\n  onClickDeleteButton,\n  itemDataArray,\n  isLastRow,\n  injectionOrder,\n}) => {\n  const [updateInputDialog, setUpdateInputDialog] = useState(false);\n\n  const [inputData, setInputData] = useState<InjectionExecute>(itemData);\n\n  const openUpdateInputDialog = () => {\n    setUpdateInputDialog(!updateInputDialog);\n  };\n\n  const setInputDataValue = (value: InjectionExecute) => {\n    setInputData(value);\n    openUpdateInputDialog();\n  };\n\n  return (\n    <>\n      <Card sx={{ minWidth: 275 }}>\n        <CardContent>\n          <Typography sx={{ fontSize: 16 }}>\n            開始日時：\n            {inputData.executionStartDate !== undefined\n              ? format(\n                  new Date(inputData.executionStartDate),\n                  'yyyy/MM/dd HH:mm',\n                )\n              : ''}\n          </Typography>\n          <Typography sx={{ fontSize: 16 }}>\n            終了日時：\n            {inputData.executionEndDate !== undefined &&\n            inputData.executionEndDate !== null\n              ? format(new Date(inputData.executionEndDate), 'yyyy/MM/dd HH:mm')\n              : ''}\n          </Typography>\n          <Typography sx={{ fontSize: 16 }}>\n            速度：{inputData.executionDropSpeed}\n          </Typography>\n          <Typography sx={{ fontSize: 16 }}>\n            投与量：{inputData.executionAmount}\n          </Typography>\n          <Typography sx={{ fontSize: 16 }}>\n            コメント：{inputData.executionFreeComment}\n          </Typography>\n        </CardContent>\n        {isLastRow && (\n          <Grid container>\n            <Grid item>\n              <IconButton\n                aria-label=\"delete\"\n                onClick={() => {\n                  onClickDeleteButton(itemData);\n                }}\n              >\n                <DeleteIcon />\n              </IconButton>\n            </Grid>\n            <Grid item>\n              <IconButton aria-label=\"edit\" onClick={openUpdateInputDialog}>\n                <EditIcon />\n              </IconButton>\n              <Dialog open={updateInputDialog} onClose={openUpdateInputDialog}>\n                <Box sx={{ flexGrow: 1 }}>\n                  <Grid container spacing={2}>\n                    <Grid item xs={4}>\n                      <IconButton onClick={openUpdateInputDialog}>\n                        <CloseIcon />\n                      </IconButton>\n                    </Grid>\n                    <Grid item xs={7}>\n                      <Typography sx={{ fontSize: 25 }}>\n                        点滴履歴編集\n                      </Typography>\n                    </Grid>\n                  </Grid>\n                </Box>\n                <Divider />\n                <DropExecuteItemInput\n                  defaultExecute={inputData}\n                  onInput={setInputDataValue}\n                  executes={itemDataArray}\n                  isShowRemainAmount={false}\n                  totalAmount={injectionOrder.totalAmount}\n                  reserveDate={injectionOrder.reserveDate}\n                />\n              </Dialog>\n            </Grid>\n          </Grid>\n        )}\n      </Card>\n    </>\n  );\n};\nexport default DropExecuteItem;\n","import { FC } from 'react';\nimport { List, ListItem } from '@mui/material/';\nimport DropExecuteItem from './DropExecuteItem';\nimport { InjectionOrder } from '@/types/order/injection/injectionOrder';\nimport { InjectionExecute } from '@/types/order/injection/injectionExecute';\n\nconst style = {\n  width: '100%',\n  maxWidth: 380,\n  bgcolor: 'background.paper',\n};\n\ntype Props = {\n  dropItemList: InjectionExecute[];\n  deleteAction: (value: InjectionExecute) => void;\n  injectionOrder: InjectionOrder;\n};\n\nconst DropExecuteItemList: FC<Props> = ({\n  dropItemList,\n  deleteAction,\n  injectionOrder,\n}) => (\n  <>\n    <List sx={style} component=\"nav\">\n      {dropItemList.map((listItem) => (\n        <ListItem>\n          <DropExecuteItem\n            itemData={listItem}\n            onClickDeleteButton={deleteAction}\n            itemDataArray={dropItemList}\n            isLastRow={\n              dropItemList[dropItemList.length - 1].injectionExecutionId ===\n              listItem.injectionExecutionId\n            }\n            injectionOrder={injectionOrder}\n          />\n        </ListItem>\n      ))}\n    </List>\n  </>\n);\n\nexport default DropExecuteItemList;\n","export const getAge = (birthday: Date): number => {\n  const today = new Date();\n\n  const thisYearsBirthday = new Date(\n    today.getFullYear(),\n    birthday.getMonth() - 1,\n    birthday.getDate(),\n  );\n\n  let age = today.getFullYear() - birthday.getFullYear();\n\n  if (today < thisYearsBirthday) {\n    age -= 1;\n  }\n\n  return age;\n};\n\nexport default getAge;\n","import { VFC } from 'react';\nimport { format } from 'date-fns';\nimport {\n  Card,\n  CardContent,\n  CardActions,\n  CardHeader,\n  IconButton,\n  Typography,\n  CircularProgress,\n  Collapse,\n} from '@mui/material';\nimport { AccountCircle } from '@mui/icons-material';\nimport Patient from '../../../types/patient';\nimport { getAge } from '../../../utils/age';\n\ntype Props = {\n  patient?: Patient;\n  cardActions?: JSX.Element;\n  cardContent?: JSX.Element;\n  displayContent?: boolean;\n};\n\nconst PatientCardPresenter: VFC<Props> = ({\n  patient,\n  cardActions,\n  cardContent,\n  displayContent = false,\n}) => {\n  const birthDate = patient ? new Date(patient.birthday) : new Date();\n  const formatBirthDate = patient ? format(birthDate, 'yyyy/MM/dd') : '';\n  const age = patient ? `(${getAge(birthDate).toString()}歳)` : '';\n\n  return patient ? (\n    <>\n      <Card variant=\"outlined\">\n        <CardHeader\n          avatar={\n            <IconButton aria-label=\"account\">\n              <AccountCircle fontSize=\"large\" />\n            </IconButton>\n          }\n          title={\n            <>\n              <Typography variant=\"h5\" component=\"div\">\n                {`${patient.lastName} ${patient.firstName}`}\n              </Typography>\n              <Typography gutterBottom variant=\"body1\" component=\"div\">\n                {`ID:${patient.patientId}`}\n              </Typography>\n              <Typography gutterBottom variant=\"body1\" component=\"div\">\n                {`${formatBirthDate} ${age} ${patient.sex} ${patient.bloodType}型 ${patient.rhFactor}`}\n              </Typography>\n            </>\n          }\n        />\n        {cardActions && <CardActions>{cardActions}</CardActions>}\n        {cardContent && (\n          <Collapse in={displayContent} timeout=\"auto\" unmountOnExit>\n            <CardContent>{cardContent}</CardContent>\n          </Collapse>\n        )}\n      </Card>\n    </>\n  ) : (\n    <Card variant=\"outlined\">\n      <CardHeader\n        title={\n          <>\n            <CircularProgress sx={{ margin: 'auto' }} />\n          </>\n        }\n      />\n    </Card>\n  );\n};\n\nexport default PatientCardPresenter;\n","import { VFC, useEffect, useState } from 'react';\nimport ky from 'ky';\nimport PatientCardPresenter from './PatientCardPresenter';\nimport Patient from '../../../types/patient';\n\ntype Props = {\n  patientId: string;\n  cardActions?: JSX.Element;\n  cardContent?: JSX.Element;\n  displayContent?: boolean;\n};\n\nconst PatientCard: VFC<Props> = ({\n  patientId,\n  cardActions,\n  cardContent,\n  displayContent,\n}) => {\n  const [patient, setPatient] = useState<Patient | undefined>(undefined);\n\n  useEffect(() => {\n    const loadPatient = async (): Promise<void> => {\n      try {\n        const patientResult = await ky\n          .get(`http://localhost:8080/jerseywebapp/rest/patients/${patientId}`)\n          .json<Patient>();\n\n        setPatient(patientResult);\n      } catch (err) {\n        // eslint-disable-next-line no-console\n        console.log('error');\n      } finally {\n        // setIsLoading(false);\n      }\n    };\n\n    void loadPatient();\n  }, [patientId]);\n\n  return (\n    <PatientCardPresenter\n      patient={patient}\n      cardActions={cardActions}\n      cardContent={cardContent}\n      displayContent={displayContent}\n    />\n  );\n};\n\nexport default PatientCard;\n","/* eslint-disable no-nested-ternary */\nimport { FC, useState } from 'react';\nimport { Button, Grid, Divider, Typography, CardContent } from '@mui/material';\n\nimport format from 'date-fns/format';\n\nimport DropExecuteItemList from '@/components/pages/InjectionExecute/Drop/DropExecuteItemList';\nimport PatientCard from '@/components/oraganisms/PatientCard/PatientCard';\nimport { InjectionOrder } from '@/types/order/injection/injectionOrder';\nimport { InjectionExecute } from '@/types/order/injection/injectionExecute';\n\ntype DisplayType = 'summary' | 'status' | 'execute' | '';\n\ntype Props = {\n  patientId: string;\n  injectionOrder: InjectionOrder;\n  executes: InjectionExecute[];\n  // eslint-disable-next-line react/require-default-props\n  deleteExecuteItem?: (itemData: InjectionExecute) => void;\n};\n\nconst InjectionPatientCard: FC<Props> = ({\n  patientId,\n  injectionOrder,\n  executes,\n  deleteExecuteItem,\n}) => {\n  const [expanded, setExpanded] = useState<boolean>(false);\n  const [displayType, setDisplayType] = useState<DisplayType>('');\n\n  const handleExpandClick = (selectedDisplayType: DisplayType) => {\n    if (!displayType) {\n      setExpanded(!expanded);\n      setDisplayType(selectedDisplayType);\n\n      return;\n    }\n\n    if (displayType !== selectedDisplayType) {\n      setDisplayType(selectedDisplayType);\n\n      if (!expanded) {\n        setExpanded(!expanded);\n      }\n\n      return;\n    }\n\n    setExpanded(!expanded);\n  };\n\n  const cardActions: JSX.Element = (\n    <Grid container spacing={2}>\n      <Grid item xs={4}>\n        <Button size=\"small\" onClick={() => handleExpandClick('summary')}>\n          {expanded && displayType === 'summary'\n            ? 'オーダ内容を閉じる'\n            : 'オーダ内容を表示'}\n        </Button>\n      </Grid>\n      <Grid item xs={4}>\n        <Button size=\"small\" onClick={() => handleExpandClick('status')}>\n          {expanded && displayType === 'status'\n            ? '受付内容を閉じる'\n            : '受付内容を表示'}\n        </Button>\n      </Grid>\n      {injectionOrder?.execType === 2 && (\n        <Grid item xs={4}>\n          <Button size=\"small\" onClick={() => handleExpandClick('execute')}>\n            {expanded && displayType === 'execute'\n              ? '実施内容を閉じる'\n              : '実施内容を表示'}\n          </Button>\n        </Grid>\n      )}\n    </Grid>\n  );\n\n  const plansDateText = () => {\n    if (injectionOrder?.plansDate != null) {\n      if (injectionOrder.plansDate.substring(11) === '99:99') {\n        return format(\n          new Date(injectionOrder?.plansDate.substring(0, 10)),\n          'yyyy/MM/dd 未定',\n        );\n      }\n\n      return format(new Date(injectionOrder?.plansDate), 'yyyy/MM/dd HH:mm');\n    }\n\n    return '';\n  };\n\n  const createStatusSummary = `\n  依頼医：${injectionOrder?.issueStaffName ?? ''}\n  依頼日時：${\n    injectionOrder?.issueDate != null\n      ? format(new Date(injectionOrder?.issueDate), 'yyyy/MM/dd HH:mm')\n      : ''\n  }\n  代理入力者：${injectionOrder?.departmentName ?? ''}\n  指示受者：${injectionOrder?.instructedName ?? ''}\n  指示受日時：${\n    injectionOrder?.instructedDate != null\n      ? format(new Date(injectionOrder?.instructedDate), 'yyyy/MM/dd HH:mm')\n      : ''\n  }\n  実施者：${injectionOrder?.completeName ?? ''}\n  実施日時：${\n    injectionOrder?.completeDate != null\n      ? format(new Date(injectionOrder?.completeDate), 'yyyy/MM/dd HH:mm')\n      : ''\n  }\n  オーダ状態：${injectionOrder?.orderStatusName ?? ''}\n  予定日時：${plansDateText()}`;\n\n  const createCardContent = (inputDisplayType: DisplayType) => {\n    if (inputDisplayType === 'summary') {\n      return injectionOrder?.summary\n        .split(/(\\n)/)\n        .filter((item) => /\\n/.exec(item) === null)\n        .map((item) => <Typography>{item}</Typography>);\n    }\n\n    if (inputDisplayType === 'status') {\n      return createStatusSummary\n        .split(/(\\n)/)\n        .filter((item) => /\\n/.exec(item) === null)\n        .map((item) => <Typography>{item}</Typography>);\n    }\n\n    if (inputDisplayType === 'execute') {\n      if (injectionOrder != null && deleteExecuteItem) {\n        return (\n          <DropExecuteItemList\n            dropItemList={executes}\n            deleteAction={deleteExecuteItem}\n            injectionOrder={injectionOrder}\n          />\n        );\n      }\n    }\n\n    return null;\n  };\n\n  const cardContent: JSX.Element = (\n    <>\n      <Divider />\n      <CardContent>{createCardContent(displayType)}</CardContent>\n    </>\n  );\n\n  return (\n    <PatientCard\n      patientId={patientId}\n      cardActions={cardActions}\n      cardContent={cardContent}\n      displayContent={expanded}\n    />\n  );\n};\n\nexport default InjectionPatientCard;\n","import React, { FC, useEffect, useState } from 'react';\nimport TextField from '@mui/material/TextField';\nimport Grid from '@mui/material/Grid';\nimport { Autocomplete } from '@mui/lab';\nimport {\n  Fab,\n  Dialog,\n  InputAdornment,\n  Backdrop,\n  Snackbar,\n  Alert,\n} from '@mui/material';\nimport { isAfter } from 'date-fns';\nimport NavigationIcon from '@mui/icons-material/Navigation';\nimport ky from 'ky';\nimport { styled } from '@mui/material/styles';\nimport { useNavigate } from 'react-router';\nimport InjectionRouteNestList from '@/components/oraganisms/InjectionRouteNestList/InjectionRouteNestList';\nimport { TreeItem } from '@/types/components/nestList/treeItem';\nimport doExecution from '@/components/pages/InjectionExecute/injectionExecution';\nimport { InjectionExecutePatch } from '@/components/pages/InjectionExecute/injectionExecutePatch';\nimport Staff from '@/types/staff';\nimport StaffSelect from '@/components/oraganisms/StaffSelect/StaffSelect';\nimport { useAuthUser } from '@/contexts/auth/AuthUserContext';\nimport { InjectionExecute } from '@/types/order/injection/injectionExecute';\nimport { InjectionOrder } from '@/types/order/injection/injectionOrder';\nimport InjectionPatientCard from '@/components/oraganisms/InjectionPatientCard/InjectionPatientCard';\nimport { Comment } from '@/types/order/injection/injectionComment';\n\ntype Result = {\n  executeCommentItems: Comment[];\n  routeNestDatas: TreeItem[];\n};\n\ntype Props = {\n  injectionOrder: InjectionOrder;\n};\n\nconst FabButton = styled(Fab)({\n  position: 'fixed',\n  right: 15,\n  bottom: 15,\n});\n\nconst OneShotExec: FC<Props> = ({ injectionOrder }) => {\n  const navigate = useNavigate();\n  const auth = useAuthUser();\n\n  const editable: boolean = injectionOrder?.orderStatus !== 4;\n\n  const [successBarOpen, setSuccessBarOpen] = useState<boolean>(false);\n  const [errorBarOpen, setErrorBarOpen] = useState<boolean>(false);\n\n  const [oneShotRecord, _] = useState<InjectionExecute>(\n    injectionOrder.execList.length !== 0\n      ? injectionOrder.execList[0]\n      : {\n          injectionExecutionId: 0,\n          executionStartId: 0,\n        },\n  );\n  // 実施コメント\n  const [executeCommentDatas, setExecuteCommentDatas] = useState<Comment[]>([]);\n\n  const [executeCommentId, setExecuteCommentId] = useState<number | undefined>(\n    undefined,\n  );\n\n  const [executeCommentValue, setExecuteCommentValue] = useState<\n    string | undefined\n  >(undefined);\n\n  // 投与ルートネストリストダイアログ\n  const [openInjectionRouteDialog, setOpenInjectionRouteDialog] =\n    useState(false);\n\n  const [nestListDatas, setNestListDatas] = useState<TreeItem[]>([]);\n\n  const injectionRouteNestListOpen = () => {\n    setOpenInjectionRouteDialog(!openInjectionRouteDialog);\n  };\n\n  const [injectionRouteId, setInjectionRouteId] = useState<number | undefined>(\n    undefined,\n  );\n\n  // 実施開始日\n  const [startDate, setStartDate] = useState<string | undefined>(undefined);\n\n  const [\n    injectionRouteNameTextFieldValue,\n    setInjectionRouteNameTextFieldValue,\n  ] = useState<string | undefined>(undefined);\n\n  // 投与ルート\n  const onClickInjectionRoute = () => {\n    injectionRouteNestListOpen();\n  };\n\n  const setInjectionRoute = (injectionRouteData: TreeItem): void => {\n    setInjectionRouteId(injectionRouteData.itemId);\n    setInjectionRouteNameTextFieldValue(injectionRouteData.value);\n    injectionRouteNestListOpen();\n  };\n\n  const setupStartStaffId = (): number => {\n    if (\n      oneShotRecord.executionStartId !== undefined &&\n      oneShotRecord.executionStartId !== 0\n    ) {\n      return oneShotRecord.executionStartId;\n    }\n    if (auth) {\n      return Number(auth.staffId);\n    }\n\n    return 0;\n  };\n\n  // 実施開始者\n  const [startStaff, setStartStaff] = useState<Staff>();\n\n  // 投与量\n  const [amount, setAmount] = useState<number | undefined>(undefined);\n\n  const onChangeAmount = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setAmount(Number(event.target.value));\n  };\n\n  // エラー状態管理用のstate\n\n  const [injectionRouteError, setInjectionRouteError] = useState(false);\n\n  const [injectionRouteErrorHelperText, setInjectionRouteErrorHelperText] =\n    useState('');\n\n  const [startDateError, setStartDateError] = useState(false);\n\n  const [startDateErrorHelperText, setStartDateErrorHelperText] = useState('');\n\n  const [startStaffError, setStartStaffError] = useState(false);\n\n  const [startStaffErrorHelperText, setStartStaffErrorHelperText] =\n    useState('');\n\n  const [amountError, setAmountError] = useState(false);\n\n  const [amountErrorHelperText, setAmountErrorHelperText] = useState('');\n\n  // 入力チェック\n  const inputCheck = (): boolean => {\n    const isInjectionRouteInputError = injectionRouteId === 0;\n\n    // 投与ルートの入力チェック\n    setInjectionRouteError(isInjectionRouteInputError);\n    setInjectionRouteErrorHelperText(\n      isInjectionRouteInputError ? '投与ルートを指定してください。' : '',\n    );\n\n    // 実施開始日入力チェック\n    let isStartDateError: boolean;\n    if (startDate == null) {\n      isStartDateError = true;\n      setStartDateError(isStartDateError);\n      setStartDateErrorHelperText('実施開始日時を指定してください。');\n    } else if (isAfter(new Date(startDate), new Date())) {\n      isStartDateError = true;\n      setStartDateError(isStartDateError);\n      setStartDateErrorHelperText('実施開始日時に未来日は指定できません。');\n    } else {\n      isStartDateError = false;\n      setStartDateError(isStartDateError);\n      setStartDateErrorHelperText('');\n    }\n\n    // 実施開始者入力チェック\n    const isStartStaffInputError = startStaff?.staffId === 0;\n    setStartStaffError(isStartStaffInputError);\n    setStartStaffErrorHelperText(\n      isStartStaffInputError ? '開始者を指定してください。' : '',\n    );\n\n    // 投与量入力チェック\n    const isAmountInputError = typeof amount === 'number' && amount > 9999.999;\n    setAmountError(isAmountInputError);\n    setAmountErrorHelperText(\n      isAmountInputError\n        ? '投与量は、整数4ケタ、小数3ケタ以内で入力してください。'\n        : '',\n    );\n\n    const isError = (): boolean =>\n      isInjectionRouteInputError ||\n      isStartDateError ||\n      isStartStaffInputError ||\n      isAmountInputError;\n\n    if (isError()) {\n      return false;\n    }\n\n    return true;\n  };\n\n  useEffect(() => {\n    const load = async (): Promise<void> => {\n      try {\n        const result = await ky\n          .get(\n            'http://localhost:8080/jerseywebapp/rest/order/injection/execute/oneshot',\n            {\n              searchParams: {\n                reserveDate: injectionOrder.reserveDate,\n              },\n            },\n          )\n          .json<Result>();\n\n        setExecuteCommentDatas(result.executeCommentItems);\n        setNestListDatas(result.routeNestDatas);\n      } catch (err) {\n        throw new Error('error');\n      }\n    };\n\n    void load();\n  }, [injectionOrder.reserveDate]);\n\n  useEffect(() => {\n    setExecuteCommentId(oneShotRecord.executionCommentId);\n    setExecuteCommentValue(oneShotRecord.executionFreeComment);\n    setInjectionRouteId(injectionOrder?.injectionRouteId);\n    setInjectionRouteNameTextFieldValue(injectionOrder?.injectionRouteName);\n    setStartDate(oneShotRecord.executionStartDate);\n    setAmount(\n      injectionOrder?.orderStatus === 4\n        ? oneShotRecord.executionAmount\n        : injectionOrder?.totalAmount,\n    );\n  }, [injectionOrder, oneShotRecord]);\n\n  const executeButtonAction = async () => {\n    if (injectionOrder?.orderStatus !== 4) {\n      if (!inputCheck()) {\n        return;\n      }\n    }\n\n    const itemD: InjectionExecute = {\n      injectionRouteMstId: injectionRouteId,\n      executionStartDate: startDate,\n      executionStartId: startStaff?.staffId,\n      executionCommentId: executeCommentId,\n      executionFreeComment: executeCommentValue,\n      executionAmount: amount,\n    };\n\n    const executeData: InjectionExecutePatch = {\n      orderHeaderId: injectionOrder?.orderHeaderId ?? 0,\n      version: injectionOrder?.version ?? 0,\n      updateId: auth ? Number(auth.staffId) : 0,\n      end: true,\n      execList: injectionOrder?.orderStatus !== 4 ? [itemD] : [],\n    };\n\n    const result = await doExecution(executeData);\n\n    if (result) {\n      setSuccessBarOpen(true);\n    } else {\n      setErrorBarOpen(true);\n    }\n  };\n\n  return (\n    <>\n      <Backdrop\n        sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }}\n        open={successBarOpen}\n      />\n      <Snackbar\n        open={successBarOpen}\n        autoHideDuration={6000}\n        onClose={() => {\n          setSuccessBarOpen(false);\n          navigate(-1);\n        }}\n      >\n        <Alert\n          onClose={() => {\n            setSuccessBarOpen(false);\n            navigate(-1);\n          }}\n          severity=\"success\"\n          sx={{ width: '100%' }}\n        >\n          {injectionOrder?.orderStatus !== 4\n            ? '実施情報を登録しました。'\n            : '実施取消を行いました。'}\n        </Alert>\n      </Snackbar>\n\n      <Snackbar\n        open={errorBarOpen}\n        autoHideDuration={6000}\n        onClose={() => {\n          setErrorBarOpen(false);\n        }}\n      >\n        <Alert\n          onClose={() => {\n            setErrorBarOpen(false);\n          }}\n          severity=\"error\"\n          sx={{ width: '100%' }}\n        >\n          実施情報の更新に失敗しました。\n        </Alert>\n      </Snackbar>\n      <FabButton\n        variant=\"extended\"\n        color=\"primary\"\n        aria-label=\"add-button\"\n        onClick={executeButtonAction}\n      >\n        <NavigationIcon sx={{ mr: 1 }} />\n        {injectionOrder?.execList.length === 0 ? '確定' : '実施取消'}\n      </FabButton>\n\n      <InjectionPatientCard\n        patientId={injectionOrder.patientId}\n        injectionOrder={injectionOrder}\n        executes={injectionOrder.execList}\n      />\n\n      <Grid container spacing={2} direction=\"column\">\n        <Grid item>\n          <TextField\n            defaultValue=\" \"\n            disabled={!editable}\n            error={injectionRouteError}\n            helperText={injectionRouteErrorHelperText}\n            id=\"injectionRouteTextField\"\n            label=\"投与ルート\"\n            variant=\"filled\"\n            value={injectionRouteNameTextFieldValue}\n            onClick={onClickInjectionRoute}\n            InputProps={{\n              readOnly: true,\n            }}\n          />\n          <Dialog\n            open={openInjectionRouteDialog}\n            onClose={injectionRouteNestListOpen}\n          >\n            <InjectionRouteNestList\n              nestListItemClickAction={setInjectionRoute}\n              listDatas={nestListDatas}\n            />\n          </Dialog>\n        </Grid>\n        <Grid item>\n          <TextField\n            label=\"実施開始日時\"\n            type=\"datetime-local\"\n            error={startDateError}\n            disabled={!editable}\n            helperText={startDateErrorHelperText}\n            value={startDate}\n            sx={{ width: 250 }}\n            InputLabelProps={{\n              shrink: true,\n            }}\n            onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n              setStartDate(event.target.value);\n            }}\n          />\n        </Grid>\n        <Grid item>\n          <StaffSelect\n            label=\"開始者\"\n            defaultStaffId={setupStartStaffId()}\n            error={startStaffError}\n            helperText={startStaffErrorHelperText}\n            onChange={(staff?: Staff) => {\n              if (staff !== undefined) {\n                setStartStaff(staff);\n              }\n            }}\n          />\n        </Grid>\n        <Grid item>\n          <TextField\n            error={amountError}\n            helperText={amountErrorHelperText}\n            id=\"amountTextField\"\n            label=\"投与量\"\n            variant=\"outlined\"\n            type=\"number\"\n            disabled={!editable}\n            value={amount}\n            onChange={onChangeAmount}\n            InputProps={{\n              endAdornment: <InputAdornment position=\"end\">ml</InputAdornment>,\n            }}\n          />\n        </Grid>\n        <Grid item>\n          <Autocomplete\n            freeSolo\n            disabled={!editable}\n            onChange={(event, value) => {\n              if (typeof value === 'string') {\n                setExecuteCommentId(Number(0));\n                setExecuteCommentValue(value);\n              } else if (value != null) {\n                setExecuteCommentId(Number(value?.executeCommentId));\n                setExecuteCommentValue(value?.content);\n              }\n            }}\n            value={\n              executeCommentId !== 0\n                ? executeCommentDatas.find(\n                    (e) => Number(e.executeCommentId) === executeCommentId,\n                  )\n                : executeCommentValue\n            }\n            options={executeCommentDatas}\n            getOptionLabel={(option) =>\n              typeof option === 'string' ? option : option.content\n            }\n            renderInput={(params) => (\n              <TextField {...params} label=\"実施コメント\" />\n            )}\n          />\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n\nexport default OneShotExec;\n","import { FC, useState } from 'react';\nimport { Alert, Backdrop, Fab, Grid, Snackbar } from '@mui/material';\nimport NavigationIcon from '@mui/icons-material/Navigation';\nimport { styled } from '@mui/material/styles';\nimport { useNavigate } from 'react-router-dom';\nimport DropExecuteItemInput from '@/components/pages/InjectionExecute/Drop/DropExecuteItemInput';\nimport { useAuthUser } from '@/contexts/auth/AuthUserContext';\nimport { InjectionExecute } from '@/types/order/injection/injectionExecute';\nimport { InjectionOrder } from '@/types/order/injection/injectionOrder';\nimport { InjectionExecutePatch } from '@/components/pages/InjectionExecute/injectionExecutePatch';\nimport doExecution from '@/components/pages/InjectionExecute/injectionExecution';\nimport InjectionPatientCard from '@/components/oraganisms/InjectionPatientCard/InjectionPatientCard';\n\ntype Prop = {\n  injectionOrder: InjectionOrder;\n};\n\nconst FabButton = styled(Fab)({\n  position: 'fixed',\n  right: 15,\n  bottom: 15,\n});\n\nconst DropExecute: FC<Prop> = ({ injectionOrder }) => {\n  const navigate = useNavigate();\n  const auth = useAuthUser();\n  const [isEndFlg, setEndFlg] = useState(injectionOrder.orderStatus === 4);\n  const [executes, setExecutes] = useState<InjectionExecute[]>(\n    injectionOrder.execList,\n  );\n  const [successBarOpen, setSuccessBarOpen] = useState<boolean>(false);\n  const [errorBarOpen, setErrorBarOpen] = useState<boolean>(false);\n\n  // 入力画面の初期入力値\n  const inputData: InjectionExecute = {\n    injectionExecutionId: 0,\n    executionStartId: 0,\n    executionEndId: 0,\n    executionDropSpeed: 0,\n  };\n\n  // 点滴履歴一覧の追加処理\n  const inputDropRecord = (itemData: InjectionExecute, endFlg: boolean) => {\n    setExecutes((e) => [...e, itemData]);\n    setEndFlg(endFlg);\n  };\n\n  // 点滴履歴一覧の削除処理\n  const deleteDropRecord = (itemData: InjectionExecute) => {\n    setExecutes((e) => e.filter((f) => f !== itemData));\n    setEndFlg(false);\n  };\n\n  const executeButtonAction = async () => {\n    const executeData: InjectionExecutePatch = {\n      orderHeaderId: injectionOrder?.orderHeaderId ?? 0,\n      version: injectionOrder?.version ?? 0,\n      updateId: auth ? Number(auth.staffId) : 0,\n      end: isEndFlg,\n      execList: injectionOrder?.orderStatus !== 4 ? executes : [],\n    };\n\n    const result = await doExecution(executeData);\n\n    if (result) {\n      setSuccessBarOpen(true);\n    } else {\n      setErrorBarOpen(true);\n    }\n  };\n\n  return (\n    <>\n      <Backdrop\n        sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }}\n        open={successBarOpen}\n      />\n      <Snackbar\n        open={successBarOpen}\n        autoHideDuration={6000}\n        onClose={() => {\n          setSuccessBarOpen(false);\n          navigate(-1);\n        }}\n      >\n        <Alert\n          onClose={() => {\n            setSuccessBarOpen(false);\n            navigate(-1);\n          }}\n          severity=\"success\"\n          sx={{ width: '100%' }}\n        >\n          {injectionOrder?.orderStatus !== 4\n            ? '実施情報を登録しました。'\n            : '実施取消を行いました。'}\n        </Alert>\n      </Snackbar>\n\n      <Snackbar\n        open={errorBarOpen}\n        autoHideDuration={6000}\n        onClose={() => {\n          setErrorBarOpen(false);\n        }}\n      >\n        <Alert\n          onClose={() => {\n            setErrorBarOpen(false);\n          }}\n          severity=\"error\"\n          sx={{ width: '100%' }}\n        >\n          実施情報の更新に失敗しました。\n        </Alert>\n      </Snackbar>\n\n      <FabButton\n        variant=\"extended\"\n        color=\"primary\"\n        aria-label=\"add-button\"\n        onClick={executeButtonAction}\n      >\n        <NavigationIcon sx={{ mr: 1 }} />\n        {injectionOrder?.orderStatus !== 4 ? '確定' : '実施取消'}\n      </FabButton>\n\n      <Grid container spacing={2} direction=\"column\">\n        <Grid item>\n          <InjectionPatientCard\n            patientId={injectionOrder.patientId}\n            injectionOrder={injectionOrder}\n            executes={executes}\n            deleteExecuteItem={deleteDropRecord}\n          />\n        </Grid>\n        <Grid item />\n        <DropExecuteItemInput\n          defaultExecute={inputData}\n          onInput={inputDropRecord}\n          executes={executes}\n          totalAmount={injectionOrder.totalAmount}\n          isShowRemainAmount\n          reserveDate={injectionOrder.reserveDate}\n        />\n      </Grid>\n    </>\n  );\n};\n\nexport default DropExecute;\n","/* eslint-disable no-nested-ternary */\nimport { FC, useCallback, useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport ky from 'ky';\n\nimport { isAfter } from 'date-fns';\nimport OneShotExec from './Oneshot/OneShotExec';\nimport DropExecute from './Drop/DropExecute';\nimport Header from '@/components/oraganisms/Header/Header';\nimport { InjectionOrder } from '@/types/order/injection/injectionOrder';\nimport AlertDialog from '@/components/molecules/ErrorDialog/AlertDialog';\nimport { useAuthUser } from '@/contexts/auth/AuthUserContext';\n\nconst InjectionExecute: FC = () => {\n  const auth = useAuthUser();\n  const { patientid, orderid } = useParams();\n\n  const [injectionOrderData, setInjectionOrderData] =\n    useState<InjectionOrder>();\n\n  const [doInstructResult, setDoInstructResult] = useState<boolean>(false);\n  const [checkPass, setCheckPass] = useState(false);\n\n  const [errorText, setErrorText] = useState<string | undefined>(undefined);\n  const [dialogOpen, setDialogOpen] = useState<boolean>(false);\n\n  const load = useCallback(async (): Promise<void> => {\n    try {\n      const result = await ky\n        .get('http://localhost:8080/jerseywebapp/rest/order/injection', {\n          searchParams: {\n            orderId: Number(orderid),\n          },\n        })\n        .json<InjectionOrder>();\n\n      const InputBarcodeCheck = (): boolean => {\n        if (!result) {\n          setErrorText('オーダを取得できません。');\n\n          return false;\n        }\n\n        if (result.patientId !== patientid) {\n          setErrorText('患者情報が一致しません。');\n\n          return false;\n        }\n\n        if (result.mainClass !== 'injection') {\n          setErrorText('注射オーダを取得できません。');\n\n          return false;\n        }\n\n        if (result.orderStatusName === '未受付') {\n          setErrorText('このオーダは受付されていません。');\n\n          return false;\n        }\n\n        if (result.orderStatus === 5) {\n          setErrorText('このオーダは中止されています。');\n\n          return false;\n        }\n\n        if (!result.executableFutureDay) {\n          const preferredDate = new Date(result.preferredDate);\n          if (isAfter(preferredDate, new Date())) {\n            setErrorText('未来日は実施できません。');\n\n            return false;\n          }\n        }\n\n        if (result.instructedStatus === 1) {\n          if (result.forcingInstracted) {\n            setDialogOpen(true);\n\n            if (!doInstructResult) {\n              setErrorText('指示受けされていません。');\n\n              return false;\n            }\n          } else {\n            setErrorText('指示受けされていないため実施は行えません。');\n\n            return false;\n          }\n        }\n\n        return true;\n      };\n\n      setCheckPass(InputBarcodeCheck);\n      setInjectionOrderData(result);\n    } catch (err) {\n      throw new Error('error');\n    }\n  }, [doInstructResult, orderid, patientid]);\n\n  useEffect(() => {\n    void load();\n  }, [load]);\n\n  if (!checkPass || !injectionOrderData) {\n    return <p>{errorText}</p>;\n  }\n\n  const doInstruct = async (\n    injectionOrder: InjectionOrder,\n  ): Promise<boolean> => {\n    try {\n      const result = await ky\n        .put(`http://localhost:8080/jerseywebapp/rest/order/injection`, {\n          json: {\n            orderHeaderId: injectionOrder.orderHeaderId,\n            userId: auth?.staffId,\n            patientId: injectionOrder.patientId,\n          },\n          timeout: false,\n        })\n        .json<InjectionOrder>();\n\n      setInjectionOrderData(result);\n\n      return true;\n    } catch {\n      // eslint-disable-next-line no-alert\n      alert('error');\n\n      return false;\n    }\n  };\n\n  return (\n    <>\n      <Header\n        onDrawerToggle={() => {\n          console.log(123);\n        }}\n      />\n\n      <AlertDialog\n        alertOpen={dialogOpen}\n        message={`指示受けされていません。\n        指示受を行いますか？`}\n        toggleAlert={() => {\n          setDialogOpen(false);\n        }}\n        onEmpty={async () => {\n          setDialogOpen(false);\n          setDoInstructResult(await doInstruct(injectionOrderData));\n        }}\n      />\n\n      {injectionOrderData.execType === 2 ? (\n        <DropExecute injectionOrder={injectionOrderData} />\n      ) : (\n        <OneShotExec injectionOrder={injectionOrderData} />\n      )}\n    </>\n  );\n};\n\nexport default InjectionExecute;\n","import { VFC, useState } from 'react';\nimport {\n  Button,\n  Card,\n  CardContent,\n  CardHeader,\n  IconButton,\n  Typography,\n  Divider,\n  Grid,\n} from '@mui/material';\nimport ArrowForwardIcon from '@mui/icons-material/ArrowForward';\nimport PatientCard from '../PatientCard/PatientCard';\nimport TransfusionExecute from './TransfusionPatientCardTypes';\n\ntype Props = {\n  patientId: string;\n  summary: string;\n  status: string;\n  executes: TransfusionExecute[];\n};\n\ntype DisplayType = 'summary' | 'status' | 'execute' | '';\n\nconst TransfusionPatientCardPresenter: VFC<Props> = ({\n  patientId,\n  summary,\n  status,\n  executes,\n}) => {\n  const [expanded, setExpanded] = useState<boolean>(false);\n  const [displayType, setDisplayType] = useState<DisplayType>('');\n\n  const handleExpandClick = (selectedDisplayType: DisplayType) => {\n    if (!displayType) {\n      setExpanded(!expanded);\n      setDisplayType(selectedDisplayType);\n\n      return;\n    }\n\n    if (displayType !== selectedDisplayType) {\n      setDisplayType(selectedDisplayType);\n\n      if (!expanded) {\n        setExpanded(!expanded);\n      }\n\n      return;\n    }\n\n    setExpanded(!expanded);\n  };\n\n  const createExecuteSummary = (\n    execute: TransfusionExecute,\n  ) => `製造番号：${execute.formulationNo}\n  使用日：${execute.executeDate}\n  実施者：${execute.executeStaffName}\n  実施区分：${execute.executeTypeName}\n  フィルタ：${execute.filterTypeName}\n  副作用：${execute.sideEffectNames}\n  `;\n\n  const createCardContent = (inputDisplayType: DisplayType) => {\n    if (inputDisplayType === 'summary') {\n      return summary\n        .split(/(\\n)/)\n        .filter((item) => /\\n/.exec(item) === null)\n        .map((item, index) => (\n          <Typography key={`summary-${String(index)}`}>{item}</Typography>\n        ));\n    }\n\n    if (inputDisplayType === 'status') {\n      return status\n        .split(/(\\n)/)\n        .filter((item) => /\\n/.exec(item) === null)\n        .map((item, index) => (\n          <Typography key={`status-${String(index)}`}>{item}</Typography>\n        ));\n    }\n\n    if (inputDisplayType === 'execute') {\n      return executes.map((item) => (\n        <Card variant=\"outlined\" key={item.formulationNo}>\n          <CardHeader\n            avatar={\n              item.isExecuteTarget ? (\n                <IconButton aria-label=\"execute\">\n                  <ArrowForwardIcon fontSize=\"medium\" />\n                </IconButton>\n              ) : (\n                <IconButton aria-label=\"execute\" sx={{ opacity: 0 }}>\n                  <ArrowForwardIcon fontSize=\"medium\" />\n                </IconButton>\n              )\n            }\n            title={\n              <>\n                <Typography\n                  variant=\"h5\"\n                  component=\"div\"\n                  key={item.formulationName}\n                >\n                  {item.formulationName}\n                </Typography>\n              </>\n            }\n          />\n          <CardContent>\n            {createExecuteSummary(item)\n              .split(/(\\n)/)\n              .filter((exec) => /\\n/.exec(exec) === null)\n              .map((exec, index) => (\n                <Typography key={`content-${String(index)}`}>{exec}</Typography>\n              ))}\n          </CardContent>\n        </Card>\n      ));\n    }\n\n    return null;\n  };\n\n  // cardActions\n  const cardActions: JSX.Element = (\n    <Grid container spacing={2}>\n      <Grid item xs={4}>\n        <Button size=\"small\" onClick={() => handleExpandClick('summary')}>\n          {expanded && displayType === 'summary'\n            ? 'オーダ内容を閉じる'\n            : 'オーダ内容を表示'}\n        </Button>\n      </Grid>\n      <Grid item xs={4}>\n        <Button size=\"small\" onClick={() => handleExpandClick('status')}>\n          {expanded && displayType === 'status'\n            ? '受付内容を閉じる'\n            : '受付内容を表示'}\n        </Button>\n      </Grid>\n      <Grid item xs={4}>\n        <Button size=\"small\" onClick={() => handleExpandClick('execute')}>\n          {expanded && displayType === 'execute'\n            ? '実施内容を閉じる'\n            : '実施内容を表示'}\n        </Button>\n      </Grid>\n    </Grid>\n  );\n\n  // cardContent\n  const cardContent: JSX.Element = (\n    <>\n      <Divider />\n      <CardContent>{createCardContent(displayType)}</CardContent>\n    </>\n  );\n\n  return (\n    <>\n      <PatientCard\n        patientId={patientId}\n        cardActions={cardActions}\n        cardContent={cardContent}\n        displayContent={expanded}\n      />\n    </>\n  );\n};\n\nexport default TransfusionPatientCardPresenter;\n","import { VFC } from 'react';\nimport TransfusionPatientCardPresenter from './TransfusionPatientCardPresenter';\nimport TransfusionExecute from './TransfusionPatientCardTypes';\n\ntype Props = {\n  patientId: string;\n  summary: string;\n  status: string;\n  executes: TransfusionExecute[];\n};\n\nconst TransfusionPatientCard: VFC<Props> = ({\n  patientId,\n  summary,\n  status,\n  executes,\n}) => (\n  <TransfusionPatientCardPresenter\n    patientId={patientId}\n    summary={summary}\n    status={status}\n    executes={executes}\n  />\n);\n\nexport default TransfusionPatientCard;\n","import OrderHeader from '../../../types/order/orderHeader';\n\nconst getStatusName = (orderStatus: number): string => {\n  if (orderStatus === 2) {\n    return '未実施';\n  }\n  if (orderStatus === 3) {\n    return '実施中';\n  }\n  if (orderStatus === 4) {\n    return '実施完了';\n  }\n\n  return '';\n};\n\nconst crateStatusSummary = (order: OrderHeader): string => {\n  const {\n    issueName,\n    deputeIssueName,\n    issueDate,\n    auditName,\n    auditDate,\n    orderStatus,\n  } = order;\n\n  const statusName = getStatusName(orderStatus);\n\n  return `依頼医：${issueName}\n    代理入力者：${deputeIssueName}\n    依頼日時：${issueDate}\n    実施者：${auditName}\n    実施日時：${auditDate}\n    オーダ状態：${statusName}\n    `.replaceAll('null', '');\n};\n\nexport default crateStatusSummary;\n","import { VFC } from 'react';\nimport {\n  FormControl,\n  FormHelperText,\n  InputLabel,\n  MenuItem,\n  Select,\n} from '@mui/material';\nimport TransfusionExecuteType from '../../../types/order/transfusion/transfusionExecuteType';\n\ntype Props = {\n  execTypeItems: TransfusionExecuteType[];\n  handleOnChange: (input: string | null) => void;\n  defaultExecuteType?: string;\n  label?: string;\n  error?: boolean;\n  helperText?: string;\n};\n\nconst TransfusionExecuteTypeSelectPresenter: VFC<Props> = ({\n  execTypeItems,\n  handleOnChange,\n  defaultExecuteType,\n  label = '',\n  error,\n  helperText,\n}) => (\n  <>\n    <FormControl error={error}>\n      <InputLabel id=\"exec-type-label\">{label}</InputLabel>\n      <Select\n        labelId=\"exec-type-label\"\n        id=\"exec-type\"\n        label=\"実施区分\"\n        value={defaultExecuteType}\n        // defaultValue={defaultExecuteType}\n        onChange={(event) => handleOnChange(event.target.value)}\n        sx={{ width: 250 }}\n      >\n        {execTypeItems.map((item) => (\n          <MenuItem value={item.value} key={item.value}>\n            {item.name}\n          </MenuItem>\n        ))}\n      </Select>\n      <FormHelperText>{helperText}</FormHelperText>\n    </FormControl>\n  </>\n);\nexport default TransfusionExecuteTypeSelectPresenter;\n","import { VFC, useEffect, useState } from 'react';\nimport ky from '@/lib/ky';\nimport TransfusionExecuteTypeSelectPresenter from './TransfusionExecuteTypeSelectPresenter';\nimport TransfusionExecuteType from '../../../types/order/transfusion/transfusionExecuteType';\n\ntype Props = {\n  onChange?: (exutecuteType?: TransfusionExecuteType) => void;\n  label?: string;\n  value?: number;\n  error?: boolean;\n  helperText?: string;\n  displayExecuteTypes?: ExecuteType[];\n};\n\ntype ExecuteType = 'DELIVERY' | 'EXECUTE' | 'RETURN' | '';\n\ntype TransfusionExecuteTypeResult = {\n  executeTypes: TransfusionExecuteType[];\n};\n\nconst TransfusionExecuteTypeSelect: VFC<Props> = ({\n  value,\n  label,\n  onChange,\n  error,\n  helperText,\n  displayExecuteTypes = ['DELIVERY', 'EXECUTE', 'RETURN'],\n}) => {\n  const [executeTypes, setExecuteTypes] = useState<TransfusionExecuteType[]>(\n    [],\n  );\n\n  useEffect(() => {\n    const loadStaffs = async (): Promise<void> => {\n      try {\n        const executeResult = await ky\n          .get(`orders/transfusions/executes/types`)\n          .json<TransfusionExecuteTypeResult>();\n\n        const filteredExecuteTypes = executeResult.executeTypes.filter(\n          (e) => displayExecuteTypes.findIndex((d) => d === e.type) > -1,\n        );\n        setExecuteTypes(filteredExecuteTypes);\n      } catch (err) {\n        // eslint-disable-next-line no-console\n        console.log('error');\n      } finally {\n        // setIsLoading(false);\n      }\n    };\n\n    void loadStaffs();\n  }, [displayExecuteTypes]);\n\n  const handleOnChange = (input: string | null): void => {\n    const selected = executeTypes.find((type) => String(type.value) === input);\n\n    if (onChange) {\n      onChange(selected);\n    }\n  };\n\n  return (\n    <TransfusionExecuteTypeSelectPresenter\n      execTypeItems={executeTypes}\n      handleOnChange={handleOnChange}\n      defaultExecuteType={String(value)}\n      label={label}\n      error={error}\n      helperText={helperText}\n    />\n  );\n};\n\nexport default TransfusionExecuteTypeSelect;\n","import { VFC } from 'react';\nimport OutlinedInput from '@mui/material/OutlinedInput';\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport ListItemText from '@mui/material/ListItemText';\nimport Select, { SelectChangeEvent } from '@mui/material/Select';\nimport Checkbox from '@mui/material/Checkbox';\n\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n  PaperProps: {\n    style: {\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n      width: 250,\n    },\n  },\n};\n\ntype NameValueItem = {\n  name: string;\n  value: string;\n};\n\ntype Props = {\n  items: NameValueItem[];\n  label?: string;\n  values?: string[];\n  onChange?: (values: NameValueItem[]) => void;\n};\n\nconst getSelectedNames = (items: NameValueItem[], selectedValues: string[]) =>\n  selectedValues\n    .map((selectedValue) => {\n      const selectedItem = items.find((item) => item.value === selectedValue);\n\n      if (selectedItem) {\n        return selectedItem;\n      }\n\n      return { name: '', value: 0 };\n    })\n    .filter((selectedNameValue) => selectedNameValue.value)\n    .map((selectedNameValue) => selectedNameValue.name);\n\nconst MultipleSelectPresenter: VFC<Props> = ({\n  items,\n  label,\n  values = [],\n  onChange,\n}) => {\n  const selectedNames = getSelectedNames(items, values);\n\n  const handleChange = (event: SelectChangeEvent<typeof values>) => {\n    const {\n      target: { value },\n    } = event;\n\n    const selectedValues =\n      typeof value === 'string' ? [value] : value.slice().sort();\n    if (onChange) {\n      const selectedNameValues = items.filter(\n        (item) => selectedValues.findIndex((v) => v === item.value) > -1,\n      );\n      onChange(selectedNameValues);\n    }\n  };\n\n  return (\n    <>\n      <FormControl sx={{ m: 1, width: 300 }}>\n        <InputLabel id=\"multiple-checkbox-label\">{label}</InputLabel>\n        <Select\n          labelId=\"multiple-checkbox-label\"\n          id=\"multiple-checkbox\"\n          multiple\n          value={values}\n          onChange={handleChange}\n          input={<OutlinedInput label=\"Tag\" />}\n          renderValue={(_) => selectedNames.join(', ')}\n          MenuProps={MenuProps}\n        >\n          {items.map((item) => (\n            <MenuItem key={item.name} value={item.value}>\n              <Checkbox\n                checked={values.findIndex((value) => value === item.value) > -1}\n              />\n              <ListItemText primary={item.name} />\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n    </>\n  );\n};\n\nexport default MultipleSelectPresenter;\n","import { VFC } from 'react';\nimport MultipleSelectPresenter from './MultipleSelectPresenter';\n\ntype NameValueItem = {\n  name: string;\n  value: string;\n};\n\ntype Props = {\n  items: NameValueItem[];\n  label?: string;\n  values?: string[];\n  onChange?: (values: NameValueItem[]) => void;\n};\n\nconst MultipleSelect: VFC<Props> = ({\n  items,\n  label = '',\n  values = [],\n  onChange,\n}) => (\n  <MultipleSelectPresenter\n    items={items}\n    label={label}\n    values={values}\n    onChange={onChange}\n  />\n);\n\nexport default MultipleSelect;\n","import { VFC } from 'react';\nimport MultipleSelect from '../../molecules/MultipleSelect/MultipleSelect';\n\ntype NameValueItem = {\n  name: string;\n  value: string;\n};\n\ntype Props = {\n  items: NameValueItem[];\n  label?: string;\n  sideEffectIds?: string[];\n  onChange?: (values: NameValueItem[]) => void;\n};\n\nconst SideEffectSelectPresenter: VFC<Props> = ({\n  items,\n  label,\n  sideEffectIds,\n  onChange,\n}) => (\n  <MultipleSelect\n    items={items}\n    label={label}\n    values={sideEffectIds}\n    onChange={onChange}\n  />\n);\n\nexport default SideEffectSelectPresenter;\n","import { VFC, useEffect, useState } from 'react';\nimport ky from 'ky';\nimport SideEffectSelectPresenter from './SideEffectSelectPresenter';\nimport TransfusionSideEffect from '@/types/order/transfusion/transfusionSideEffect';\n\ntype NameValueItem = {\n  name: string;\n  value: string;\n};\n\ntype Props = {\n  label?: string;\n  sideEffectIds?: number[];\n  onChange?: (values: TransfusionSideEffect[]) => void;\n};\n\ntype Result = {\n  sideEffects: TransfusionSideEffect[];\n};\n\nconst SideEffectSelect: VFC<Props> = ({\n  label = '',\n  sideEffectIds = [],\n  onChange,\n}) => {\n  const [sideEffects, setSideEffects] = useState<TransfusionSideEffect[]>([]);\n  const [sideEffectItems, setSideEffectItems] = useState<NameValueItem[]>([]);\n\n  useEffect(() => {\n    const loadStaffs = async (): Promise<void> => {\n      try {\n        const result = await ky\n          .get(\n            `http://localhost:8080/jerseywebapp/rest/orders/transfusions/executes/side-effects`,\n          )\n          .json<Result>();\n\n        setSideEffects(result.sideEffects);\n        setSideEffectItems(\n          result.sideEffects.map((s) => {\n            const name = s.sideEffectName;\n            const value = String(s.sideEffectMstId);\n\n            return { name, value };\n          }),\n        );\n      } catch (err) {\n        // eslint-disable-next-line no-console\n        console.log('error');\n      } finally {\n        // setIsLoading(false);\n      }\n    };\n\n    void loadStaffs();\n  }, []);\n\n  const handleOnChange = (items: NameValueItem[]) => {\n    const selectedSideEffects = sideEffects.filter(\n      (s) => items.findIndex((i) => Number(i.value) === s.sideEffectMstId) > -1,\n    );\n\n    if (onChange) {\n      void onChange(selectedSideEffects);\n    }\n  };\n\n  return (\n    <SideEffectSelectPresenter\n      items={sideEffectItems}\n      label={label}\n      sideEffectIds={sideEffectIds ? sideEffectIds.map((v) => String(v)) : []}\n      onChange={handleOnChange}\n    />\n  );\n};\n\nexport default SideEffectSelect;\n","import { VFC, useState } from 'react';\nimport {\n  Fab,\n  FormControl,\n  FormHelperText,\n  InputLabel,\n  MenuItem,\n  Select,\n  Stack,\n  TextField,\n} from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport NavigationIcon from '@mui/icons-material/Navigation';\nimport { SubmitHandler, useForm, Controller } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport { format } from 'date-fns';\nimport { useLogout } from '@/contexts/auth/AuthUserContext';\nimport Header from '@/components/oraganisms/Header/Header';\nimport SideBar from '@/components/oraganisms/SideBar/SideBar';\nimport TransfusionPatientCard from '@/components/oraganisms/TransfusionPatientCard/TransfusionPatientCard';\nimport TransfusionOrder from '@/types/order/transfusion/transfusionOrder';\nimport crateStatusSummary from './orderStatusUtil';\nimport StaffSelect from '@/components/oraganisms/StaffSelect/StaffSelect';\nimport TransfusionDeliveryFormulation from '@/types/order/transfusion/transfusionDeliveryFormulation';\nimport TransfusionExecuteTypeSelect from '@/components/oraganisms/TransfusionExecuteTypeSelect/TransfusionExecuteTypeSelect';\nimport SideEffectSelect from '@/components/oraganisms/SideEffectSelect/SideEffectSelect';\nimport TransfusionExecute from '@/components/oraganisms/TransfusionPatientCard/TransfusionPatientCardTypes';\n\ntype Props = {\n  transfusionOrder: TransfusionOrder;\n  deliveryFormulation: TransfusionDeliveryFormulation;\n  handleExecute: (input: TransfusionExecuteForm) => void;\n};\n\nexport type TransfusionExecuteForm = {\n  executeDate: string;\n  executeStaffId: number;\n  executeType: number;\n  filterType: number;\n  sideEffectIds: number[];\n};\n\nconst toTransfusionExecute = (\n  formulation: TransfusionDeliveryFormulation,\n  targetFormulationNo: string,\n  targetFormulationCode: string,\n): TransfusionExecute => {\n  const { formulationCode, formulationNo, formulationName } = formulation;\n  const isExecuteTarget =\n    formulationCode === targetFormulationCode &&\n    formulationNo === targetFormulationNo;\n\n  const { execute } = formulation;\n\n  if (!execute) {\n    return {\n      isExecuteTarget,\n      formulationName,\n      formulationNo,\n      executeDate: '',\n      executeStaffName: '',\n      executeTypeName: '',\n      filterTypeName: '',\n      sideEffectNames: '',\n    };\n  }\n\n  const {\n    executeDate,\n    executeStaffName,\n    executeTypeName,\n    filterTypeName,\n    sideEffects,\n  } = execute;\n\n  const sideEffectNames = sideEffects.map((s) => s.sideEffectName).join(',');\n\n  return {\n    isExecuteTarget,\n    formulationName,\n    formulationNo,\n    executeDate,\n    executeStaffName,\n    executeTypeName,\n    filterTypeName,\n    sideEffectNames,\n  };\n};\n\nconst schema = yup.object({\n  executeDate: yup.string().required('実施日時を入力してください。'),\n  executeStaffId: yup.number().required('実施者を入力してください。'),\n  executeType: yup.string().required('実施区分を入力してください。'),\n  filterType: yup.string().required('フィルタ区分を入力してください。'),\n});\n\nconst FabButton = styled(Fab)({\n  position: 'fixed',\n  right: 15,\n  bottom: 15,\n});\n\nconst TranfusionExecutePresenter: VFC<Props> = ({\n  transfusionOrder,\n  deliveryFormulation,\n  handleExecute,\n}) => {\n  const { formulationName, formulationNo, formulationCode } =\n    deliveryFormulation;\n\n  const [drawerOpen, setDrawerOpen] = useState<boolean>(false);\n  const logout = useLogout();\n  const toggleDrawer = () => setDrawerOpen(!drawerOpen);\n  const onLogout = () => logout();\n\n  const status = crateStatusSummary(transfusionOrder);\n\n  const { deliveryFormulations } = transfusionOrder.content;\n  const executes = deliveryFormulations.map((f) =>\n    toTransfusionExecute(f, formulationNo, formulationCode),\n  );\n\n  const targetExecute = deliveryFormulation.execute;\n\n  const {\n    register,\n    handleSubmit,\n    control,\n    formState: { errors },\n  } = useForm<TransfusionExecuteForm>({\n    resolver: yupResolver(schema),\n    defaultValues: {\n      executeDate: targetExecute ? targetExecute.executeDate : '',\n      executeStaffId: targetExecute ? targetExecute.executeStaffId : 0,\n      executeType: targetExecute ? targetExecute.executeType : 1,\n      filterType: targetExecute ? targetExecute.filterType : 1,\n      sideEffectIds: targetExecute\n        ? targetExecute.sideEffects.map((s) => s.sideEffectMstId)\n        : [],\n    },\n  });\n\n  const onSubmit: SubmitHandler<TransfusionExecuteForm> = (inputForm) => {\n    const {\n      executeDate,\n      executeStaffId,\n      executeType,\n      filterType,\n      sideEffectIds,\n    } = inputForm;\n\n    // if (inputForm) {\n    //   console.log('return');\n    //   alert('OK');\n\n    //   return;\n    // }\n\n    const input: TransfusionExecuteForm = {\n      executeDate,\n      executeStaffId,\n      executeType,\n      filterType,\n      sideEffectIds,\n    };\n\n    void handleExecute(input);\n  };\n\n  return (\n    <>\n      <Header onDrawerToggle={toggleDrawer} />\n      <SideBar\n        drawerOpen={drawerOpen}\n        toggleDrawer={toggleDrawer}\n        onOpen={onLogout}\n      />\n      <Stack\n        component=\"form\"\n        noValidate\n        spacing={3}\n        paddingTop=\"25px\"\n        sx={{\n          flexGrow: 1,\n        }}\n      >\n        <TransfusionPatientCard\n          patientId={transfusionOrder.patientId}\n          summary={transfusionOrder.summary}\n          status={status}\n          executes={executes}\n        />\n        <TextField\n          disabled\n          id=\"formuration-name\"\n          label=\"製剤名\"\n          variant=\"filled\"\n          defaultValue={formulationName}\n          InputProps={{\n            readOnly: true,\n          }}\n        />\n        <TextField\n          disabled\n          id=\"formuration-number\"\n          label=\"製剤番号\"\n          variant=\"filled\"\n          defaultValue={formulationNo}\n          InputProps={{\n            readOnly: true,\n          }}\n        />\n        <TextField\n          id=\"exec-date\"\n          label=\"使用日時\"\n          type=\"datetime-local\"\n          defaultValue={format(new Date(), \"yyyy-MM-dd'T'HH:mm\")}\n          sx={{ width: 250 }}\n          InputLabelProps={{\n            shrink: true,\n          }}\n          error={'executeDate' in errors}\n          helperText={errors.executeDate?.message}\n          {...register('executeDate')}\n        />\n        <Controller\n          control={control}\n          name=\"executeStaffId\"\n          render={({ field: { onChange, value } }) => (\n            <StaffSelect\n              label=\"実施者\"\n              defaultStaffId={value}\n              onChange={(s) => onChange(s?.staffId)}\n              error={'executeStaffId' in errors}\n              helperText={errors.executeStaffId?.message}\n            />\n          )}\n        />\n        <Controller\n          control={control}\n          name=\"executeType\"\n          render={({ field: { onChange, value } }) => (\n            <TransfusionExecuteTypeSelect\n              label=\"実施区分\"\n              displayExecuteTypes={['EXECUTE', 'RETURN']}\n              onChange={(input) => onChange(input?.value)}\n              value={value}\n              error={'executeType' in errors}\n              helperText={errors.executeType?.message}\n            />\n          )}\n        />\n        <FormControl error={'filterType' in errors}>\n          <InputLabel id=\"filter-use-flg-label\">フィルタ</InputLabel>\n          <Select\n            labelId=\"filter-use-flg-label\"\n            id=\"filter-use-flg\"\n            label=\"フィルタ\"\n            defaultValue={1}\n            sx={{ width: 250 }}\n            {...register('filterType')}\n          >\n            <MenuItem value={1}>使用</MenuItem>\n            <MenuItem value={2}>未使用</MenuItem>\n          </Select>\n          <FormHelperText>{errors.filterType?.message}</FormHelperText>\n        </FormControl>\n        <Controller\n          control={control}\n          name=\"sideEffectIds\"\n          render={({ field: { value, onChange } }) => (\n            <SideEffectSelect\n              label=\"副作用\"\n              sideEffectIds={value}\n              onChange={(sideEffects) => {\n                onChange(sideEffects.map((s) => s.sideEffectMstId));\n              }}\n            />\n          )}\n        />\n        <FabButton\n          variant=\"extended\"\n          color=\"primary\"\n          aria-label=\"add-button\"\n          onClick={handleSubmit(onSubmit)}\n        >\n          <NavigationIcon sx={{ mr: 1 }} />\n          実施入力\n        </FabButton>\n      </Stack>\n    </>\n  );\n};\n\nexport default TranfusionExecutePresenter;\n","import { VFC, useEffect, useState } from 'react';\nimport { Box, CircularProgress, Stack, Typography } from '@mui/material';\nimport BlockIcon from '@mui/icons-material/Block';\nimport { red } from '@mui/material/colors';\nimport ky from '@/lib/ky';\nimport TransfusionOrder from '../../../types/order/transfusion/transfusionOrder';\nimport TranfusionExecutePresenter, {\n  TransfusionExecuteForm,\n} from './TransfusionExecutePresenter';\nimport TransfusionDeliveryFormulation from '../../../types/order/transfusion/transfusionDeliveryFormulation';\n\ntype TransfusionResult = {\n  transfusionOrder?: TransfusionOrder;\n};\n\ntype TransfusionPatchRequest = {\n  orderHeaderId: number;\n  orderStatus: number;\n  version: number;\n  updateStaffId: number;\n  execute: TransfusionExecutePatchRequest;\n};\n\ntype TransfusionExecutePatchRequest = {\n  formulationCode: string;\n  formulationNo: string;\n  executeDate: string;\n  executeStaffId: number;\n  executeType: number;\n  filterType: number;\n  sideEffectIds: number[];\n};\n\ntype TransfusionExecutePatchResponse = {\n  result: string;\n};\n\ntype Props = {\n  patientId?: string;\n  formulationCode?: string;\n  formulationNo?: string;\n};\n\nconst TranfusionExecute: VFC<Props> = ({\n  patientId = '2730',\n  formulationCode = '0393012',\n  formulationNo = '123456',\n}) => {\n  const [order, setOrder] = useState<TransfusionOrder | undefined>(undefined);\n  const [deliveryFormulation, setDeliveryFormulation] = useState<\n    TransfusionDeliveryFormulation | undefined\n  >(undefined);\n  const [isLoading, setLoading] = useState<boolean>(false);\n\n  useEffect(() => {\n    const load = async (): Promise<void> => {\n      setLoading(true);\n      try {\n        const transfusionResult = await ky\n          .get(`orders/transfusions`, {\n            searchParams: {\n              patientId,\n              formulationCode,\n              formulationNo,\n            },\n          })\n          .json<TransfusionResult>();\n\n        setOrder(transfusionResult.transfusionOrder);\n\n        if (transfusionResult.transfusionOrder) {\n          const formurations =\n            transfusionResult.transfusionOrder.content.deliveryFormulations;\n          const targetFormulation = formurations.find(\n            (v) =>\n              v.formulationCode === formulationCode &&\n              v.formulationNo === formulationNo,\n          );\n\n          setDeliveryFormulation(targetFormulation);\n        }\n      } catch (err) {\n        // eslint-disable-next-line no-console\n        console.log('error');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    void load();\n  }, [patientId, formulationCode, formulationNo]);\n\n  // 保存処理\n  const handleExecute = async (input: TransfusionExecuteForm) => {\n    if (!order) {\n      return;\n    }\n\n    const { orderHeaderId, orderStatus, version } = order;\n    const {\n      executeDate,\n      executeStaffId,\n      executeType,\n      filterType,\n      sideEffectIds,\n    } = input;\n\n    const transfusionOrderPatch: TransfusionPatchRequest = {\n      orderHeaderId,\n      version,\n      orderStatus,\n      updateStaffId: 10008,\n      execute: {\n        formulationCode,\n        formulationNo,\n        executeDate,\n        executeStaffId,\n        executeType,\n        filterType,\n        sideEffectIds,\n      },\n    };\n\n    try {\n      await ky\n        .patch(`orders/transfusions`, {\n          json: transfusionOrderPatch,\n          timeout: false,\n        })\n        .json<TransfusionExecutePatchResponse>();\n    } catch {\n      // eslint-disable-next-line no-alert\n      alert('error');\n    } finally {\n      // eslint-disable-next-line no-alert\n      alert('finally');\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <Box sx={{ display: 'flex' }}>\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  if (!order || !deliveryFormulation) {\n    return (\n      <Stack\n        component=\"form\"\n        noValidate\n        spacing={0}\n        paddingTop=\"25px\"\n        sx={{\n          flexGrow: 1,\n        }}\n      >\n        <Box sx={{ display: 'flex' }}>\n          <BlockIcon sx={{ color: red[500] }} />\n          <Typography>オーダが取得できませんでした。</Typography>\n        </Box>\n        <Typography>患者ID：{patientId}</Typography>\n        <Typography>製剤コード：{formulationCode}</Typography>\n        <Typography>製剤番号：{formulationNo}</Typography>\n      </Stack>\n    );\n  }\n\n  return (\n    <TranfusionExecutePresenter\n      transfusionOrder={order}\n      deliveryFormulation={deliveryFormulation}\n      handleExecute={handleExecute}\n    />\n  );\n};\n\nexport default TranfusionExecute;\n","import { AccountCircle } from '@mui/icons-material';\nimport { Box, Grid, InputAdornment, TextField } from '@mui/material';\nimport { VFC } from 'react';\nimport AlertDialog from '../../molecules/ErrorDialog/AlertDialog';\nimport BarcodeReader from '../../oraganisms/BarcodeReader/BarcodeReader';\nimport Header from '../../oraganisms/Header/Header';\nimport SideBar from '../../oraganisms/SideBar/SideBar';\n\ntype Props = {\n  drawerOpen: boolean;\n  toggleDrawer: () => void;\n  onLogout: () => void;\n  patientId: string;\n  formurationCode: string;\n  formurationNumber: string;\n  onScan: (code: string) => void;\n  dialogOpen: boolean;\n  setDialogOpen: (dialogOpen: boolean) => void;\n  transit: () => void;\n};\n\nconst TransfusionCheckPresenter: VFC<Props> = ({\n  drawerOpen,\n  patientId,\n  formurationCode,\n  formurationNumber,\n  dialogOpen,\n  toggleDrawer,\n  onLogout,\n  onScan,\n  setDialogOpen,\n  transit,\n}) => (\n  <>\n    <Header onDrawerToggle={toggleDrawer} />\n    <SideBar\n      drawerOpen={drawerOpen}\n      toggleDrawer={toggleDrawer}\n      onOpen={onLogout}\n    />\n    <AlertDialog\n      alertOpen={dialogOpen}\n      message={`患者ID：${patientId}\n      製剤コード：${formurationCode}\n      製剤番号：${formurationNumber}`}\n      toggleAlert={() => {\n        setDialogOpen(false);\n      }}\n      onEmpty={() => {\n        setDialogOpen(false);\n        transit();\n      }}\n    />\n    <Box\n      paddingTop=\"25px\"\n      sx={{\n        flexGrow: 1,\n      }}\n    >\n      <Grid container spacing={2}>\n        <Grid item xs={12}>\n          <TextField\n            id=\"patient-id\"\n            label=\"患者ID\"\n            color=\"success\"\n            value={patientId}\n            focused={!!patientId}\n            InputProps={{\n              startAdornment: (\n                <InputAdornment position=\"start\">\n                  <AccountCircle />\n                </InputAdornment>\n              ),\n            }}\n            fullWidth\n          />\n        </Grid>\n        <Grid item xs={6}>\n          <TextField\n            id=\"formuration-code\"\n            label=\"製剤コード\"\n            color=\"success\"\n            value={formurationCode}\n            focused={!!formurationCode}\n            fullWidth\n          />\n        </Grid>\n        <Grid item xs={6}>\n          <TextField\n            id=\"formuration-number\"\n            label=\"製剤番号\"\n            color=\"success\"\n            value={formurationNumber}\n            focused={!!formurationNumber}\n            fullWidth\n          />\n        </Grid>\n        <Grid item xs={12}>\n          <BarcodeReader onScan={onScan} />\n        </Grid>\n      </Grid>\n    </Box>\n  </>\n);\n\nexport default TransfusionCheckPresenter;\n","import { VFC, useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useLogout } from '../../../contexts/auth/AuthUserContext';\nimport TransfusionCheckPresenter from './TransfusionCheckPresenter';\n\nconst TransfusionCheck: VFC = () => {\n  const [drawerOpen, setDrawerOpen] = useState<boolean>(false);\n  const [patientId, setPatientId] = useState<string>('');\n  const [formurationCode, setFormurationCode] = useState<string>('');\n  const [formurationNumber, setFormurationNumber] = useState<string>('');\n  const [inputCode, setInputCode] = useState<string>('');\n  const [dialogOpen, setDialogOpen] = useState<boolean>(false);\n\n  const logout = useLogout();\n  const navigate = useNavigate();\n  const toggleDrawer = () => setDrawerOpen(!drawerOpen);\n  const onLogout = () => logout();\n\n  const onScan = (code: string) => {\n    setInputCode(code);\n  };\n\n  useEffect(() => {\n    if (!patientId) {\n      setPatientId(inputCode);\n    } else if (!formurationCode) {\n      setFormurationCode(inputCode);\n    } else if (!formurationNumber) {\n      setFormurationNumber(inputCode);\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [inputCode]);\n\n  useEffect(() => {\n    if (patientId && formurationCode && formurationNumber) {\n      // alert(\n      //   `patientId:${patientId}, formurationCode:${formurationCode}, formurationNumber:${formurationNumber}`,\n      // );\n      setDialogOpen(true);\n    }\n  }, [formurationCode, formurationNumber, patientId]);\n\n  return (\n    <TransfusionCheckPresenter\n      drawerOpen={drawerOpen}\n      toggleDrawer={toggleDrawer}\n      onLogout={onLogout}\n      patientId={patientId}\n      formurationCode={formurationCode}\n      formurationNumber={formurationNumber}\n      onScan={onScan}\n      dialogOpen={dialogOpen}\n      setDialogOpen={setDialogOpen}\n      transit={() => navigate('/transfusion')}\n    />\n  );\n};\n\nexport default TransfusionCheck;\n","import { FC } from 'react';\nimport { Button, Container, Typography } from '@mui/material';\nimport { ErrorBoundary, FallbackProps } from 'react-error-boundary';\nimport AuthUserProvider from '@/contexts/auth/AuthUserContext';\n\nconst ErrorFallback: FC<FallbackProps> = ({ error: { message } }) => (\n  <Container>\n    <Typography variant=\"h4\" gutterBottom component=\"div\">\n      エラーが発生しました。\n    </Typography>\n    <Typography variant=\"h5\" gutterBottom component=\"div\">\n      {message}\n    </Typography>\n    <Button\n      variant=\"contained\"\n      onClick={() => window.location.assign(window.location.origin)}\n    >\n      メニューに戻る\n    </Button>\n  </Container>\n);\n\ntype AppProviderProps = {\n  children: React.ReactNode;\n};\n\nconst AppProvider: FC<AppProviderProps> = ({ children }) => (\n  <ErrorBoundary FallbackComponent={ErrorFallback}>\n    <AuthUserProvider>{children}</AuthUserProvider>\n  </ErrorBoundary>\n);\n\nexport default AppProvider;\n","import { VFC } from 'react';\nimport { Navigate, Route, Routes, Outlet } from 'react-router';\nimport { BrowserRouter } from 'react-router-dom';\nimport Login from './components/pages/Login/Login';\nimport MainMenu from './components/pages/MainMenu/MainMenu';\nimport InjectionCheck from './components/pages/InjectionCheck/InjectionCheck';\nimport SefetyInjectionExecute from './components/pages/InjectionExecute/InjectionExecute';\nimport { useAuthUser } from './contexts/auth/AuthUserContext';\nimport BarcodeReader from './components/oraganisms/BarcodeReader/BarcodeReader';\nimport TranfusionExecute from './components/pages/TransfusionExecute/TransfusionExecute';\nimport TransfusionCheck from './components/pages/TransfusionCheck/TransfusionCheck';\nimport AppProvider from './contexts/AppProvider';\n\n/**\n * ログイン済みユーザーしかアクセスできなくする Outlet\n * @returns ログイン済み:<Outlet />, 未ログイン:/login に遷移\n */\nconst PrivateOutlet = () => {\n  const authUser = useAuthUser();\n  const isAuthenticated = authUser != null;\n\n  return isAuthenticated ? <Outlet /> : <Navigate to=\"/login\" />;\n};\n\n/**\n * 未ログインユーザーしかアクセスできなくする Outlet\n * @returns ログイン済み:/main に遷移, 未ログイン:<Outlet />\n */\nconst UnAuthOutlet = () => {\n  const auth = useAuthUser();\n  const isAuthenticated = auth?.loggedIn;\n\n  return isAuthenticated ? <Navigate to=\"/main\" /> : <Login />;\n};\n\nconst App: VFC = () => (\n  <AppProvider>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <Routes>\n        <Route path=\"/\" element={<PrivateOutlet />}>\n          <Route path=\"/\" element={<InjectionCheck />} />\n          <Route path=\"/barcode\" element={<BarcodeReader />} />\n          <Route path=\"/main\" element={<MainMenu />} />\n          <Route\n            path=\"/safetyInjectionExecuteDrop\"\n            element={<SefetyInjectionExecute />}\n          />\n          <Route\n            path=\"/safetyInjectionExecute/:patientid/:orderid\"\n            element={<SefetyInjectionExecute />}\n          />\n          <Route path=\"/transfusioncheck\" element={<TransfusionCheck />} />\n          <Route path=\"/transfusion\" element={<TranfusionExecute />} />\n        </Route>\n        <Route path=\"/login\" element={<UnAuthOutlet />}>\n          <Route path=\"/login\" element={<Login />} />\n        </Route>\n      </Routes>\n    </BrowserRouter>\n  </AppProvider>\n);\n\nexport default App;\n","/* eslint-disable @typescript-eslint/no-unsafe-call */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-var-requires */\n/* eslint-disable global-require */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport App from './App';\n// import { worker } from './mocks/browser';\n\n// if (process.env.NODE_ENV === 'development') {\nrequire('./mocks');\n// }\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}